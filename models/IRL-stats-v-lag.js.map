{"version":3,"sources":["webpack:///../../../../webpack/universalModuleDefinition","webpack:///../../../../webpack/bootstrap","webpack:///../../../date-fns/esm/_lib/requiredArgs/index.js","webpack:///../../../date-fns/esm/_lib/addLeadingZeros/index.js","webpack:///../../../date-fns/esm/toDate/index.js","webpack:///../../../date-fns/esm/_lib/toInteger/index.js","webpack:///../../../../IRL-stats.cul.js","webpack:///../../../date-fns/esm/_lib/format/lightFormatters/index.js","webpack:///../../../date-fns/esm/_lib/startOfUTCWeek/index.js","webpack:///../../../date-fns/esm/_lib/startOfUTCISOWeek/index.js","webpack:///../../../date-fns/esm/locale/_lib/buildLocalizeFn/index.js","webpack:///../../../date-fns/esm/locale/_lib/buildMatchFn/index.js","webpack:///../../../date-fns/esm/_lib/protectedTokens/index.js","webpack:///../../../../IRL-stats-v-lag.cul.js","webpack:///../../../date-fns/esm/_lib/getUTCWeekYear/index.js","webpack:///../../../date-fns/esm/_lib/getUTCISOWeekYear/index.js","webpack:///../../../date-fns/esm/locale/_lib/buildFormatLongFn/index.js","webpack:///../../../date-fns/esm/isSameDay/index.js","webpack:///../../../date-fns/esm/startOfDay/index.js","webpack:///../../../../public/owid-covid-data-IRL.csv","webpack:///../../../d3-dsv/src/dsv.js","webpack:///../../../date-fns/esm/locale/en-US/index.js","webpack:///../../../date-fns/esm/locale/en-US/_lib/formatDistance/index.js","webpack:///../../../date-fns/esm/locale/en-US/_lib/formatLong/index.js","webpack:///../../../date-fns/esm/locale/en-US/_lib/formatRelative/index.js","webpack:///../../../date-fns/esm/locale/en-US/_lib/localize/index.js","webpack:///../../../date-fns/esm/locale/en-US/_lib/match/index.js","webpack:///../../../date-fns/esm/locale/_lib/buildMatchPatternFn/index.js","webpack:///../../../date-fns/esm/isValid/index.js","webpack:///../../../date-fns/esm/isDate/index.js","webpack:///../../../date-fns/esm/_lib/getTimezoneOffsetInMilliseconds/index.js","webpack:///../../../date-fns/esm/subMilliseconds/index.js","webpack:///../../../date-fns/esm/addMilliseconds/index.js","webpack:///../../../date-fns/esm/_lib/format/longFormatters/index.js","webpack:///../../../date-fns/esm/_lib/format/formatters/index.js","webpack:///../../../date-fns/esm/_lib/getUTCWeek/index.js","webpack:///../../../date-fns/esm/_lib/startOfUTCWeekYear/index.js","webpack:///../../../date-fns/esm/_lib/getUTCISOWeek/index.js","webpack:///../../../date-fns/esm/_lib/startOfUTCISOWeekYear/index.js","webpack:///../../../date-fns/esm/_lib/getUTCDayOfYear/index.js","webpack:///../../../date-fns/esm/addDays/index.js","webpack:///../../../d3-dsv/src/csv.js","webpack:///../../../d3-dsv/src/autoType.js","webpack:///../../../date-fns/esm/format/index.js"],"names":["data","csvParse","data_string","autoType","map","d","date","Date","format","new_cases_smoothed","new_deaths_smoothed","new_cases","new_deaths","data_date_extent","length","find","isSameDay","t","new_cases_smoothed_lag_allowance","t_in","addDays","lag","new_cases_lag_allowance","cases_deaths_link_smoothed","cases_deaths_link","lag_in"],"mappings":"AAAA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,CAAC;AACD,O;QCVA;QACA;;QAEA;QACA;;QAEA;QACA;QACA;QACA;QACA;QACA;QACA;QACA;QACA;QACA;;QAEA;QACA;;QAEA;QACA;;QAEA;QACA;QACA;;;QAGA;QACA;;QAEA;QACA;;QAEA;QACA;QACA;QACA,0CAA0C,gCAAgC;QAC1E;QACA;;QAEA;QACA;QACA;QACA,wDAAwD,kBAAkB;QAC1E;QACA,iDAAiD,cAAc;QAC/D;;QAEA;QACA;QACA;QACA;QACA;QACA;QACA;QACA;QACA;QACA;QACA;QACA,yCAAyC,iCAAiC;QAC1E,gHAAgH,mBAAmB,EAAE;QACrI;QACA;;QAEA;QACA;QACA;QACA,2BAA2B,0BAA0B,EAAE;QACvD,iCAAiC,eAAe;QAChD;QACA;QACA;;QAEA;QACA,sDAAsD,+DAA+D;;QAErH;QACA;;;QAGA;QACA;;;;;;;;AClFA;AAAe;AACf;AACA;AACA;AACA,C;;;;;;;ACJA;AAAe;AACf;AACA;;AAEA;AACA;AACA;;AAEA;AACA,C;;;;;;;ACTA;AAAA;AAAyD;AACzD;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,WAAW,YAAY;AACvB,aAAa,KAAK;AAClB,YAAY,UAAU;AACtB;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEe;AACf,EAAE,kFAAY;AACd,wDAAwD;;AAExD;AACA;AACA;AACA,GAAG;AACH;AACA,GAAG;AACH;AACA;AACA,uKAAuK;;AAEvK;AACA;;AAEA;AACA;AACA,C;;;;;;;ACnDA;AAAe;AACf;AACA;AACA;;AAEA;;AAEA;AACA;AACA;;AAEA;AACA,C;;;;;;;;;;;;;;;;;;;;;;;;;CCZA;AACA;;AAEA;AACA;AACA;;AAEA,MAAMA,IAAI,GAAGC,+DAAQ,CAACC,yFAAD,EAAcC,sDAAd,CAAR,CAAgCC,GAAhC,CAAoC,CAACC,CAAD,KAAO;AACtD,SAAO;AACLC,QAAI,EAAE,IAAIC,IAAJ,CAASC,gEAAM,CAACH,CAAC,CAACC,IAAH,EAAS,YAAT,CAAf,CADD;AAELG,sBAAkB,EAAEJ,CAAC,CAACI,kBAFjB;AAGLC,uBAAmB,EAAEL,CAAC,CAACK,mBAHlB;AAILC,aAAS,EAAEN,CAAC,CAACM,SAJR;AAKLC,cAAU,EAAEP,CAAC,CAACO,UALT,EAAP;;AAOD,CARY,CAAb;;AAUO,MAAMC,gBAAgB,GAAG,QAAMb,IAAI,CAACA,IAAI,CAACc,MAAL,GAAc,CAAf,CAAJ,CAAsBR,IAArD,C,CAA2D;;AAElE;AACA;AACO,MAAMG,kBAAkB,GAAG;AAChCT,IAAI,CAACe,IAAL,CAAU,CAACV,CAAD,KAAOW,gEAAS,CAACX,CAAC,CAACC,IAAH,EAASW,CAAC,UAAV,CAA1B,EAAyCR,kBADpC;;AAGA,MAAMC,mBAAmB,GAAG;AACjCV,IAAI,CAACe,IAAL,CAAU,CAACV,CAAD,KAAOW,gEAAS,CAACX,CAAC,CAACC,IAAH,EAASW,CAAC,UAAV,CAA1B,EAAyCP,mBADpC;;AAGA,MAAMC,SAAS,GAAG;AACvBX,IAAI,CAACe,IAAL,CAAU,CAACV,CAAD,KAAOW,gEAAS,CAACX,CAAC,CAACC,IAAH,EAASW,CAAC,UAAV,CAA1B,EAAyCN,SADpC;;AAGA,MAAMC,UAAU,GAAG;AACxBZ,IAAI,CAACe,IAAL,CAAU,CAACV,CAAD,KAAOW,gEAAS,CAACX,CAAC,CAACC,IAAH,EAASW,CAAC,UAAV,CAA1B,EAAyCL,UADpC;;AAGP;;AAEO,MAAMM,gCAAgC,GAAG;AAC9CT,kBAAkB,GAAGU,IAAI,EAAEC,gEAAO,CAACH,CAAC,UAAF,EAAM,CAACI,mEAAG,YAAV,CAAhB,GADb;;AAGA,MAAMC,uBAAuB,GAAG;AACrCX,SAAS,GAAGQ,IAAI,EAAEC,gEAAO,CAACH,CAAC,UAAF,EAAM,CAACI,mEAAG,YAAV,CAAhB,GADJ;;AAGP;AACO,MAAME,0BAA0B,GAAG;AACxCL,gCAAgC,kBAAhC,GAAqCR,mBAAmB,UADnD;;AAGP;AACO,MAAMc,iBAAiB,GAAG,sBAAMF,uBAAuB,kBAAvB,GAA4BV,UAAU,UAAtE;;AAEA,MAAMS,IAAG,GAAG,QAAM,EAAlB,C,CAAsB;;AAE7B;AACA;AACO,MAAMJ,CAAC,GAAG,cAAME,IAAhB,C;;;;;;;ACpDP;AAA6D;AAC7D;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,2CAA2C;;AAE3C;AACA,WAAW,iFAAe;AAC1B,GAAG;AACH;AACA;AACA;AACA,+CAA+C,iFAAe;AAC9D,GAAG;AACH;AACA;AACA,WAAW,iFAAe;AAC1B,GAAG;AACH;AACA;AACA;;AAEA;AACA;AACA;AACA;;AAEA;AACA;;AAEA;AACA;;AAEA;AACA;AACA;AACA;AACA,GAAG;AACH;AACA;AACA,WAAW,iFAAe;AAC1B,GAAG;AACH;AACA;AACA,WAAW,iFAAe;AAC1B,GAAG;AACH;AACA;AACA,WAAW,iFAAe;AAC1B,GAAG;AACH;AACA;AACA,WAAW,iFAAe;AAC1B,GAAG;AACH;AACA;AACA;AACA;AACA;AACA,WAAW,iFAAe;AAC1B;AACA;AACe,mEAAU,E;;;;;;;ACnFzB;AAAA;AAAA;AAAA;AAA2C;AACS;AACN;AAC9C;;AAEe;AACf,EAAE,8EAAY;AACd;AACA;AACA;AACA,6DAA6D,2EAAS;AACtE,0EAA0E,2EAAS,uBAAuB;;AAE1G;AACA;AACA;;AAEA,aAAa,wEAAM;AACnB;AACA;AACA;AACA;AACA;AACA,C;;;;;;;ACvBA;AAAA;AAAA;AAA2C;AACS;AACpD;;AAEe;AACf,EAAE,8EAAY;AACd;AACA,aAAa,wEAAM;AACnB;AACA;AACA;AACA;AACA;AACA,C;;;;;;;ACbA;AAAe;AACf;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA,KAAK;AACL;;AAEA;;AAEA;AACA;;AAEA,uFAAuF;;AAEvF;AACA;AACA,C;;;;;;;ACtBA;AAAe;AACf;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA,KAAK;AACL;AACA,KAAK;AACL;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;;AAEA;AACA,mBAAmB,oBAAoB;AACvC;AACA;AACA;AACA;;AAEA;AACA,C;;;;;;;AC/CA;AAAA;AAAA;AAAA;AACA;AACO;AACP;AACA;AACO;AACP;AACA;AACO;AACP;AACA,wIAAwI;AACxI,GAAG;AACH,oIAAoI;AACpI,GAAG;AACH,8IAA8I;AAC9I,GAAG;AACH,gJAAgJ;AAChJ;AACA,C;;;;;;;AClBA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AACA;;AAEA;;AAEA;AACA;;AAEO,MAAME,GAAG,GAAG,gBAAOI,MAAnB,C,CAA4B,kL;;;;;;;ACRnC;AAAA;AAAA;AAAA;AAAA;AAA2C;AACS;AACI;AACV;AAC9C;;AAEe;AACf,EAAE,8EAAY;AACd,aAAa,wEAAM;AACnB;AACA;AACA;AACA;AACA,+EAA+E,2EAAS;AACxF,qGAAqG,2EAAS,gCAAgC;;AAE9I;AACA;AACA;;AAEA;AACA;AACA;AACA,wBAAwB,gFAAc;AACtC;AACA;AACA;AACA,wBAAwB,gFAAc;;AAEtC;AACA;AACA,GAAG;AACH;AACA,GAAG;AACH;AACA;AACA,C;;;;;;;ACpCA;AAAA;AAAA;AAAA;AAA2C;AACS;AACU;AAC9D;;AAEe;AACf,EAAE,8EAAY;AACd,aAAa,wEAAM;AACnB;AACA;AACA;AACA;AACA,wBAAwB,mFAAiB;AACzC;AACA;AACA;AACA,wBAAwB,mFAAiB;;AAEzC;AACA;AACA,GAAG;AACH;AACA,GAAG;AACH;AACA;AACA,C;;;;;;;ACzBA;AAAe;AACf;AACA;AACA;AACA;AACA;AACA;AACA;AACA,C;;;;;;;ACRA;AAAA;AAAA;AAAgD;AACS;AACzD;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,WAAW,YAAY;AACvB,WAAW,YAAY;AACvB,aAAa,QAAQ;AACrB,YAAY,UAAU;AACtB;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEe;AACf,EAAE,kFAAY;AACd,2BAA2B,4EAAU;AACrC,4BAA4B,4EAAU;AACtC;AACA,C;;;;;;;ACxCA;AAAA;AAAA;AAAwC;AACiB;AACzD;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,WAAW,YAAY;AACvB,aAAa,KAAK;AAClB,YAAY,UAAU;AACtB;AACA;AACA;AACA;AACA;AACA;;AAEe;AACf,EAAE,kFAAY;AACd,aAAa,wEAAM;AACnB;AACA;AACA,C;;;;;;;AC9Be,irjCAAwnjC,E;;;;;;;ACAvojC,YAAY;AACZ,YAAY;AACZ;AACA;AACA;;AAEA;AACA,oCAAoC;AACpC;AACA,GAAG,gBAAgB;AACnB;;AAEA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA,GAAG;;AAEH;AACA;;AAEA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEe;AACf;AACA;;AAEA;AACA;AACA;AACA;AACA,KAAK;AACL;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,oBAAoB;;AAEpB;AACA;AACA;;AAEA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA,gCAAgC,YAAY,yCAAyC;AACrF;AACA;;AAEA;AACA;AACA;AACA,gCAAgC,YAAY,yCAAyC;AACrF;AACA;AACA;;AAEA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;;AAEA;AACA;AACA;AACA;AACA,OAAO;AACP,KAAK;AACL;;AAEA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;;AAEA;AACA;AACA;;AAEA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,CAAC;;;;;;;;ACnKD;AAAA;AAAA;AAAA;AAAA;AAA4D;AACR;AACQ;AACZ;AACN;;AAE1C;AACA,UAAU;AACV;AACA;AACA;AACA;AACA,oCAAoC;AACpC,mCAAmC;AACnC;AACA;AACA;AACA,kBAAkB,4EAAc;AAChC,cAAc,wEAAU;AACxB,kBAAkB,4EAAc;AAChC,YAAY,sEAAQ;AACpB,SAAS,mEAAK;AACd;AACA;AACA;AACA;AACA;AACA;AACA;AACe,+DAAM,E;;;;;;;AC7BrB;AACA;AACA;AACA,wBAAwB,OAAO;AAC/B,GAAG;AACH;AACA;AACA,cAAc,OAAO;AACrB,GAAG;AACH;AACA;AACA;AACA,wBAAwB,OAAO;AAC/B,GAAG;AACH;AACA;AACA,cAAc,OAAO;AACrB,GAAG;AACH;AACA;AACA,oBAAoB,OAAO;AAC3B,GAAG;AACH;AACA;AACA,cAAc,OAAO;AACrB,GAAG;AACH;AACA;AACA,cAAc,OAAO;AACrB,GAAG;AACH;AACA;AACA,oBAAoB,OAAO;AAC3B,GAAG;AACH;AACA;AACA,cAAc,OAAO;AACrB,GAAG;AACH;AACA;AACA,oBAAoB,OAAO;AAC3B,GAAG;AACH;AACA;AACA,cAAc,OAAO;AACrB,GAAG;AACH;AACA;AACA,oBAAoB,OAAO;AAC3B,GAAG;AACH;AACA;AACA,cAAc,OAAO;AACrB,GAAG;AACH;AACA;AACA,mBAAmB,OAAO;AAC1B,GAAG;AACH;AACA;AACA,qBAAqB,OAAO;AAC5B;AACA;;AAEA;AACA;AACA;;AAEA;AACA;AACA,GAAG;AACH;AACA,GAAG;AACH,yCAAyC,OAAO;AAChD;;AAEA;AACA;AACA;AACA,KAAK;AACL;AACA;AACA;;AAEA;AACA;;AAEe,uEAAc,E;;;;;;;ACvF7B;AAAyE;AACzE;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,WAAW,MAAM,QAAQ,MAAM;AAC/B,WAAW,MAAM,QAAQ,MAAM;AAC/B,aAAa,MAAM,IAAI,MAAM;AAC7B,YAAY,MAAM,IAAI,MAAM;AAC5B;AACA;AACA,QAAQ,uFAAiB;AACzB;AACA;AACA,GAAG;AACH,QAAQ,uFAAiB;AACzB;AACA;AACA,GAAG;AACH,YAAY,uFAAiB;AAC7B;AACA;AACA,GAAG;AACH;AACe,mEAAU,E;;;;;;;ACjCzB;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;;AAEe,uEAAc,E;;;;;;;ACb7B;AAAqE;AACrE;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,EAAE;AACF;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,GAAG;AACH;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,GAAG;AACH;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,GAAG;AACH;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,GAAG;AACH;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA,mCAAmC;AACnC;AACA;AACA;AACA;AACA;;AAEA;;AAEA;AACA;AACA;AACA;;AAEA;AACA;;AAEA;AACA;AACA;AACA;;AAEA;AACA;;AAEA;AACA;AACA,OAAO,qFAAe;AACtB;AACA;AACA,GAAG;AACH,WAAW,qFAAe;AAC1B;AACA;AACA;AACA;AACA;AACA,GAAG;AACH,SAAS,qFAAe;AACxB;AACA;AACA,GAAG;AACH,OAAO,qFAAe;AACtB;AACA;AACA,GAAG;AACH,aAAa,qFAAe;AAC5B;AACA;AACA;AACA;AACA,GAAG;AACH;AACe,iEAAQ,E;;;;;;;ACjJvB;AAAA;AAA+D;AACc;AAC7E;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,iBAAiB,yFAAmB;AACpC;AACA;AACA;AACA;AACA;AACA,GAAG;AACH,OAAO,kFAAY;AACnB;AACA;AACA;AACA;AACA,GAAG;AACH,WAAW,kFAAY;AACvB;AACA;AACA;AACA;AACA;AACA;AACA;AACA,GAAG;AACH,SAAS,kFAAY;AACrB;AACA;AACA;AACA;AACA,GAAG;AACH,OAAO,kFAAY;AACnB;AACA;AACA;AACA;AACA,GAAG;AACH,aAAa,kFAAY;AACzB;AACA;AACA;AACA;AACA,GAAG;AACH;AACe,8DAAK,E;;;;;;;ACjGpB;AAAe;AACf;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,C;;;;;;;AChBA;AAAA;AAAA;AAAA;AAAwC;AACA;AACiB;AACzD;AACA;AACA;AACA;AACA;AACA;AACA;AACA,8DAA8D;AAC9D;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,WAAW,EAAE;AACb,aAAa,QAAQ;AACrB,YAAY,UAAU;AACtB;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEe;AACf,EAAE,kFAAY;;AAEd,OAAO,wEAAM;AACb;AACA;;AAEA,aAAa,wEAAM;AACnB;AACA,C;;;;;;;ACtEA;AAAA;AAAyD;AACzD;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,WAAW,EAAE;AACb,aAAa,QAAQ;AACrB,YAAY,UAAU;AACtB;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,2BAA2B;AAC3B;AACA;;AAEe;AACf,EAAE,kFAAY;AACd;AACA,C;;;;;;;ACzCA;AAAA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACe;AACf;AACA;AACA;AACA,C;;;;;;;ACfA;AAAA;AAAA;AAAA;AAAmD;AACO;AACD;AACzD;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,WAAW,YAAY;AACvB,WAAW,OAAO;AAClB,aAAa,KAAK;AAClB,YAAY,UAAU;AACtB;AACA;AACA;AACA;AACA;AACA;;AAEe;AACf,EAAE,kFAAY;AACd,eAAe,+EAAS;AACxB,SAAS,iFAAe;AACxB,C;;;;;;;AC9BA;AAAA;AAAA;AAAA;AAAmD;AACX;AACiB;AACzD;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,WAAW,YAAY;AACvB,WAAW,OAAO;AAClB,aAAa,KAAK;AAClB,YAAY,UAAU;AACtB;AACA;AACA;AACA;AACA;AACA;;AAEe;AACf,EAAE,kFAAY;AACd,kBAAkB,wEAAM;AACxB,eAAe,+EAAS;AACxB;AACA,C;;;;;;;AC/BA;AACA;AACA;AACA;AACA;AACA,OAAO;;AAEP;AACA;AACA;AACA,OAAO;;AAEP;AACA;AACA;AACA,OAAO;;AAEP;AACA;AACA;AACA;AACA,OAAO;AACP;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA,OAAO;;AAEP;AACA;AACA;AACA,OAAO;;AAEP;AACA;AACA;AACA,OAAO;;AAEP;AACA;AACA;AACA;AACA,OAAO;AACP;AACA;;AAEA;AACA;AACA;AACA;;AAEA;AACA;AACA;;AAEA;;AAEA;AACA;AACA;AACA;AACA,OAAO;AACP;;AAEA;AACA;AACA;AACA,OAAO;AACP;;AAEA;AACA;AACA;AACA,OAAO;AACP;;AAEA;AACA;AACA;AACA;AACA,OAAO;AACP;AACA;;AAEA,mCAAmC,MAAM,0DAA0D,MAAM;AACzG;;AAEA;AACA;AACA;AACA;AACe,uEAAc,E;;;;;;;AC/F7B;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAqE;AACJ;AACQ;AACd;AACQ;AACN;AACH;AAC1D;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,SAAS;AACT;;AAEA;AACA;AACA;AACA,SAAS;AACT;;AAEA;AACA;AACA;AACA;AACA,SAAS;AACT;AACA,GAAG;AACH;AACA;AACA;AACA;AACA,6CAA6C;;AAE7C;AACA;AACA;AACA,OAAO;AACP;;AAEA,WAAW,yEAAe;AAC1B,GAAG;AACH;AACA;AACA,yBAAyB,oFAAc,gBAAgB;;AAEvD,4EAA4E;;AAE5E;AACA;AACA,aAAa,iFAAe;AAC5B,KAAK;;;AAGL;AACA;AACA;AACA,OAAO;AACP,KAAK;;;AAGL,WAAW,iFAAe;AAC1B,GAAG;AACH;AACA;AACA,sBAAsB,uFAAiB,OAAO;;AAE9C,WAAW,iFAAe;AAC1B,GAAG;AACH;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,WAAW,iFAAe;AAC1B,GAAG;AACH;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;;AAEA;AACA,eAAe,iFAAe;AAC9B;;AAEA;AACA;AACA;AACA,SAAS;AACT;;AAEA;AACA;AACA;AACA;AACA,SAAS;AACT,oCAAoC;;AAEpC;AACA;AACA;AACA;AACA,SAAS;AACT;;AAEA;AACA;AACA;AACA;AACA;AACA,SAAS;AACT;AACA,GAAG;AACH;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;;AAEA;AACA,eAAe,iFAAe;AAC9B;;AAEA;AACA;AACA;AACA,SAAS;AACT;;AAEA;AACA;AACA;AACA;AACA,SAAS;AACT,oCAAoC;;AAEpC;AACA;AACA;AACA;AACA,SAAS;AACT;;AAEA;AACA;AACA;AACA;AACA;AACA,SAAS;AACT;AACA,GAAG;AACH;AACA;AACA;;AAEA;AACA;AACA;AACA,eAAe,yEAAe;AAC9B;;AAEA;AACA;AACA;AACA,SAAS;AACT;;AAEA;AACA;AACA;AACA;AACA,SAAS;AACT;;AAEA;AACA;AACA;AACA;AACA,SAAS;AACT;;AAEA;AACA;AACA;AACA;AACA;AACA,SAAS;AACT;AACA,GAAG;AACH;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;;AAEA;AACA,eAAe,iFAAe;AAC9B;;AAEA;AACA;AACA;AACA,SAAS;AACT;;AAEA;AACA;AACA;AACA;AACA,SAAS;AACT;;AAEA;AACA;AACA;AACA;AACA,SAAS;AACT;;AAEA;AACA;AACA;AACA;AACA;AACA,SAAS;AACT;AACA,GAAG;AACH;AACA;AACA,eAAe,gFAAU;;AAEzB;AACA;AACA;AACA,OAAO;AACP;;AAEA,WAAW,iFAAe;AAC1B,GAAG;AACH;AACA;AACA,kBAAkB,mFAAa;;AAE/B;AACA;AACA;AACA,OAAO;AACP;;AAEA,WAAW,iFAAe;AAC1B,GAAG;AACH;AACA;AACA;AACA;AACA;AACA,OAAO;AACP;;AAEA,WAAW,yEAAe;AAC1B,GAAG;AACH;AACA;AACA,oBAAoB,qFAAe;;AAEnC;AACA;AACA;AACA,OAAO;AACP;;AAEA,WAAW,iFAAe;AAC1B,GAAG;AACH;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,SAAS;AACT;;AAEA;AACA;AACA;AACA;AACA,SAAS;AACT;;AAEA;AACA;AACA;AACA;AACA,SAAS;AACT;;AAEA;AACA;AACA;AACA;AACA;AACA,SAAS;AACT;AACA,GAAG;AACH;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;;AAEA;AACA,eAAe,iFAAe;AAC9B;;AAEA;AACA;AACA;AACA,SAAS;;AAET;AACA;AACA;AACA;AACA,SAAS;AACT;;AAEA;AACA;AACA;AACA;AACA,SAAS;AACT;;AAEA;AACA;AACA;AACA;AACA,SAAS;AACT;;AAEA;AACA;AACA;AACA;AACA;AACA,SAAS;AACT;AACA,GAAG;AACH;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;;AAEA;AACA,eAAe,iFAAe;AAC9B;;AAEA;AACA;AACA;AACA,SAAS;;AAET;AACA;AACA;AACA;AACA,SAAS;AACT;;AAEA;AACA;AACA;AACA;AACA,SAAS;AACT;;AAEA;AACA;AACA;AACA;AACA,SAAS;AACT;;AAEA;AACA;AACA;AACA;AACA;AACA,SAAS;AACT;AACA,GAAG;AACH;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;;AAEA;AACA,eAAe,iFAAe;AAC9B;;AAEA;AACA;AACA;AACA,SAAS;AACT;;AAEA;AACA;AACA;AACA;AACA,SAAS;AACT;;AAEA;AACA;AACA;AACA;AACA,SAAS;AACT;;AAEA;AACA;AACA;AACA;AACA,SAAS;AACT;;AAEA;AACA;AACA;AACA;AACA;AACA,SAAS;AACT;AACA,GAAG;AACH;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA,SAAS;;AAET;AACA;AACA;AACA;AACA,SAAS;;AAET;AACA;AACA;AACA;AACA,SAAS;;AAET;AACA;AACA;AACA;AACA;AACA,SAAS;AACT;AACA,GAAG;AACH;AACA;AACA;AACA;;AAEA;AACA;AACA,KAAK;AACL;AACA,KAAK;AACL;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA,SAAS;;AAET;AACA;AACA;AACA;AACA,SAAS;;AAET;AACA;AACA;AACA;AACA,SAAS;;AAET;AACA;AACA;AACA;AACA;AACA,SAAS;AACT;AACA,GAAG;AACH;AACA;AACA;AACA;;AAEA;AACA;AACA,KAAK;AACL;AACA,KAAK;AACL;AACA,KAAK;AACL;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,SAAS;;AAET;AACA;AACA;AACA;AACA,SAAS;;AAET;AACA;AACA;AACA;AACA;AACA,SAAS;AACT;AACA,GAAG;AACH;AACA;AACA;AACA;AACA;AACA;AACA;AACA,OAAO;AACP;;AAEA,WAAW,yEAAe;AAC1B,GAAG;AACH;AACA;AACA;AACA;AACA;AACA,OAAO;AACP;;AAEA,WAAW,yEAAe;AAC1B,GAAG;AACH;AACA;AACA;;AAEA;AACA;AACA;AACA,OAAO;AACP;;AAEA,WAAW,iFAAe;AAC1B,GAAG;AACH;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA,OAAO;AACP;;AAEA,WAAW,iFAAe;AAC1B,GAAG;AACH;AACA;AACA;AACA;AACA;AACA,OAAO;AACP;;AAEA,WAAW,yEAAe;AAC1B,GAAG;AACH;AACA;AACA;AACA;AACA;AACA,OAAO;AACP;;AAEA,WAAW,yEAAe;AAC1B,GAAG;AACH;AACA;AACA,WAAW,yEAAe;AAC1B,GAAG;AACH;AACA;AACA;AACA;;AAEA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;;AAEA;AACA;AACA;AACA,GAAG;AACH;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;;AAEA;AACA;AACA;AACA,GAAG;AACH;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA,GAAG;AACH;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA,GAAG;AACH;AACA;AACA;AACA;AACA,WAAW,iFAAe;AAC1B,GAAG;AACH;AACA;AACA;AACA;AACA,WAAW,iFAAe;AAC1B;AACA;;AAEA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;;AAEA;AACA,4CAA4C,iFAAe;AAC3D;;AAEA;AACA;AACA;AACA,kBAAkB,iFAAe;AACjC;;AAEA;AACA;;AAEA;AACA;AACA;AACA;AACA,cAAc,iFAAe;AAC7B,gBAAgB,iFAAe;AAC/B;AACA;;AAEe,mEAAU,E;;;;;;;ACj2BzB;AAAA;AAAA;AAAA;AAAA;AAA2C;AACa;AACQ;AACZ;AACpD,qCAAqC;AACrC;;AAEe;AACf,EAAE,8EAAY;AACd,aAAa,wEAAM;AACnB,aAAa,gFAAc,4BAA4B,oFAAkB,0BAA0B;AACnG;AACA;;AAEA;AACA,C;;;;;;;ACfA;AAAA;AAAA;AAAA;AAAA;AAAwD;AACJ;AACI;AACV;AAC9C;;AAEe;AACf,EAAE,8EAAY;AACd;AACA;AACA;AACA,+EAA+E,2EAAS;AACxF,qGAAqG,2EAAS;AAC9G,aAAa,gFAAc;AAC3B;AACA;AACA;AACA,aAAa,gFAAc;AAC3B;AACA,C;;;;;;;ACnBA;AAAA;AAAA;AAAA;AAAA;AAA2C;AACmB;AACQ;AAClB;AACpD,qCAAqC;AACrC;;AAEe;AACf,EAAE,8EAAY;AACd,aAAa,wEAAM;AACnB,aAAa,mFAAiB,mBAAmB,uFAAqB,iBAAiB;AACvF;AACA;;AAEA;AACA,C;;;;;;;ACfA;AAAA;AAAA;AAAA;AAA8D;AACA;AACV;AACpD;;AAEe;AACf,EAAE,8EAAY;AACd,aAAa,mFAAiB;AAC9B;AACA;AACA;AACA,aAAa,mFAAiB;AAC9B;AACA,C;;;;;;;ACbA;AAAA;AAAA;AAA2C;AACS;AACpD,mCAAmC;AACnC;;AAEe;AACf,EAAE,8EAAY;AACd,aAAa,wEAAM;AACnB;AACA;AACA;AACA;AACA;AACA;AACA,C;;;;;;;ACdA;AAAA;AAAA;AAAA;AAAmD;AACX;AACiB;AACzD;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,WAAW,YAAY;AACvB,WAAW,OAAO;AAClB,aAAa,KAAK;AAClB,YAAY,UAAU;AACtB;AACA;AACA;AACA;AACA;AACA;;AAEe;AACf,EAAE,kFAAY;AACd,aAAa,wEAAM;AACnB,eAAe,+EAAS;;AAExB;AACA;AACA;;AAEA;AACA;AACA;AACA;;AAEA;AACA;AACA,C;;;;;;;AC1CA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAA2B;;AAE3B,UAAU,+DAAG;;AAEN;AACA;AACA;AACA;AACA;AACA;AACA;;;;;;;;ACVP;AAAe;AACf;AACA;AACA;AACA;AACA;AACA;AACA;AACA,uCAAuC,EAAE,KAAK,EAAE,KAAK,EAAE,KAAK,EAAE,SAAS,EAAE,IAAI,EAAE,KAAK,EAAE,MAAM,EAAE,cAAc,EAAE,IAAI,EAAE;AACpH;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA,iG;;;;;;;ACnBA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAA0C;AACW;AACK;AAClB;AACoB;AACQ;AAC2B;AAC6B;AACzE;AACM;AACzD;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA,qFAAqF;AACriDAAiD,WAAW;AAC5D;AACA,iDAAiD,WAAW;AAC5D;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,oEAAoE;AACpE,wBAAwB,4CAA4C;AACpE;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,WAAW,YAAY;AACvB,WAAW,OAAO;AAClB,WAAW,OAAO;AAClB,WAAW,OAAO,kEAAkE;AACpF,WAAW,cAAc;AACzB,WAAW,OAAO;AAClB,WAAW,QAAQ;AACnB;AACA,WAAW,QAAQ;AACnB;AACA,aAAa,OAAO;AACpB,YAAY,UAAU;AACtB,YAAY,WAAW;AACvB,YAAY,WAAW;AACvB,YAAY,WAAW;AACvB,YAAY,WAAW;AACvB,YAAY,WAAW;AACvB,YAAY,WAAW,yGAAyG;AAChI,YAAY,WAAW,qGAAqG;AAC5H,YAAY,WAAW,+GAA+G;AACtI,YAAY,WAAW,iHAAiH;AACxI,YAAY,WAAW;AACvB;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,WAAW,WAAW;AACtB;AACA;AACA,IAAI;AACJ;AACA;AACA;AACA;AACA;AACA;AACA;;AAEe;AACf,EAAE,kFAAY;AACd;AACA;AACA,iCAAiC,sEAAa;AAC9C;AACA,+EAA+E,+EAAS;AACxF,qGAAqG,+EAAS,gCAAgC;;AAE9I;AACA;AACA;;AAEA;AACA,6DAA6D,+EAAS;AACtE,0EAA0E,+EAAS,uBAAuB;;AAE1G;AACA;AACA;;AAEA;AACA;AACA;;AAEA;AACA;AACA;;AAEA,qBAAqB,wEAAM;;AAE3B,OAAO,yEAAO;AACd;AACA,GAAG;AACH;AACA;;;AAGA,uBAAuB,qGAA+B;AACtD,gBAAgB,iFAAe;AAC/B;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA,0BAA0B,mFAAc;AACxC;AACA;;AAEA;AACA,GAAG;AACH;AACA;AACA;AACA;;AAEA;;AAEA;AACA;AACA;;AAEA,oBAAoB,+EAAU;;AAE9B;AACA,kDAAkD,sGAAwB;AAC1E,QAAQ,iGAAmB;AAC3B;;AAEA,mDAAmD,uGAAyB;AAC5E,QAAQ,iGAAmB;AAC3B;;AAEA;AACA;;AAEA;AACA;AACA;;AAEA;AACA,GAAG;AACH;AACA;;AAEA;AACA;AACA,C","file":"IRL-stats-v-lag.js","sourcesContent":["(function webpackUniversalModuleDefinition(root, factory) {\n\tif(typeof exports === 'object' && typeof module === 'object')\n\t\tmodule.exports = factory();\n\telse if(typeof define === 'function' && define.amd)\n\t\tdefine([], factory);\n\telse {\n\t\tvar a = factory();\n\t\tfor(var i in a) (typeof exports === 'object' ? exports : root)[i] = a[i];\n\t}\n})(this, function() {\nreturn "," \t// The module cache\n \tvar installedModules = {};\n\n \t// The require function\n \tfunction __webpack_require__(moduleId) {\n\n \t\t// Check if module is in cache\n \t\tif(installedModules[moduleId]) {\n \t\t\treturn installedModules[moduleId].exports;\n \t\t}\n \t\t// Create a new module (and put it into the cache)\n \t\tvar module = installedModules[moduleId] = {\n \t\t\ti: moduleId,\n \t\t\tl: false,\n \t\t\texports: {}\n \t\t};\n\n \t\t// Execute the module function\n \t\tmodules[moduleId].call(module.exports, module, module.exports, __webpack_require__);\n\n \t\t// Flag the module as loaded\n \t\tmodule.l = true;\n\n \t\t// Return the exports of the module\n \t\treturn module.exports;\n \t}\n\n\n \t// expose the modules object (__webpack_modules__)\n \t__webpack_require__.m = modules;\n\n \t// expose the module cache\n \t__webpack_require__.c = installedModules;\n\n \t// define getter function for harmony exports\n \t__webpack_require__.d = function(exports, name, getter) {\n \t\tif(!__webpack_require__.o(exports, name)) {\n \t\t\tObject.defineProperty(exports, name, { enumerable: true, get: getter });\n \t\t}\n \t};\n\n \t// define __esModule on exports\n \t__webpack_require__.r = function(exports) {\n \t\tif(typeof Symbol !== 'undefined' && Symbol.toStringTag) {\n \t\t\tObject.defineProperty(exports, Symbol.toStringTag, { value: 'Module' });\n \t\t}\n \t\tObject.defineProperty(exports, '__esModule', { value: true });\n \t};\n\n \t// create a fake namespace object\n \t// mode & 1: value is a module id, require it\n \t// mode & 2: merge all properties of value into the ns\n \t// mode & 4: return value when already ns object\n \t// mode & 8|1: behave like require\n \t__webpack_require__.t = function(value, mode) {\n \t\tif(mode & 1) value = __webpack_require__(value);\n \t\tif(mode & 8) return value;\n \t\tif((mode & 4) && typeof value === 'object' && value && value.__esModule) return value;\n \t\tvar ns = Object.create(null);\n \t\t__webpack_require__.r(ns);\n \t\tObject.defineProperty(ns, 'default', { enumerable: true, value: value });\n \t\tif(mode & 2 && typeof value != 'string') for(var key in value) __webpack_require__.d(ns, key, function(key) { return value[key]; }.bind(null, key));\n \t\treturn ns;\n \t};\n\n \t// getDefaultExport function for compatibility with non-harmony modules\n \t__webpack_require__.n = function(module) {\n \t\tvar getter = module && module.__esModule ?\n \t\t\tfunction getDefault() { return module['default']; } :\n \t\t\tfunction getModuleExports() { return module; };\n \t\t__webpack_require__.d(getter, 'a', getter);\n \t\treturn getter;\n \t};\n\n \t// Object.prototype.hasOwnProperty.call\n \t__webpack_require__.o = function(object, property) { return Object.prototype.hasOwnProperty.call(object, property); };\n\n \t// __webpack_public_path__\n \t__webpack_require__.p = \"\";\n\n\n \t// Load entry module and return exports\n \treturn __webpack_require__(__webpack_require__.s = 11);\n","export default function requiredArgs(required, args) {\n  if (args.length < required) {\n    throw new TypeError(required + ' argument' + (required > 1 ? 's' : '') + ' required, but only ' + args.length + ' present');\n  }\n}","export default function addLeadingZeros(number, targetLength) {\n  var sign = number < 0 ? '-' : '';\n  var output = Math.abs(number).toString();\n\n  while (output.length < targetLength) {\n    output = '0' + output;\n  }\n\n  return sign + output;\n}","import requiredArgs from \"../_lib/requiredArgs/index.js\";\n/**\n * @name toDate\n * @category Common Helpers\n * @summary Convert the given argument to an instance of Date.\n *\n * @description\n * Convert the given argument to an instance of Date.\n *\n * If the argument is an instance of Date, the function returns its clone.\n *\n * If the argument is a number, it is treated as a timestamp.\n *\n * If the argument is none of the above, the function returns Invalid Date.\n *\n * **Note**: *all* Date arguments passed to any *date-fns* function is processed by `toDate`.\n *\n * @param {Date|Number} argument - the value to convert\n * @returns {Date} the parsed date in the local time zone\n * @throws {TypeError} 1 argument required\n *\n * @example\n * // Clone the date:\n * const result = toDate(new Date(2014, 1, 11, 11, 30, 30))\n * //=> Tue Feb 11 2014 11:30:30\n *\n * @example\n * // Convert the timestamp to date:\n * const result = toDate(1392098430000)\n * //=> Tue Feb 11 2014 11:30:30\n */\n\nexport default function toDate(argument) {\n  requiredArgs(1, arguments);\n  var argStr = Object.prototype.toString.call(argument); // Clone the date\n\n  if (argument instanceof Date || typeof argument === 'object' && argStr === '[object Date]') {\n    // Prevent the date to lose the milliseconds when passed to new Date() in IE10\n    return new Date(argument.getTime());\n  } else if (typeof argument === 'number' || argStr === '[object Number]') {\n    return new Date(argument);\n  } else {\n    if ((typeof argument === 'string' || argStr === '[object String]') && typeof console !== 'undefined') {\n      // eslint-disable-next-line no-console\n      console.warn(\"Starting with v2.0.0-beta.1 date-fns doesn't accept strings as date arguments. Please use `parseISO` to parse strings. See: https://git.io/fjule\"); // eslint-disable-next-line no-console\n\n      console.warn(new Error().stack);\n    }\n\n    return new Date(NaN);\n  }\n}","export default function toInteger(dirtyNumber) {\n  if (dirtyNumber === null || dirtyNumber === true || dirtyNumber === false) {\n    return NaN;\n  }\n\n  var number = Number(dirtyNumber);\n\n  if (isNaN(number)) {\n    return number;\n  }\n\n  return number < 0 ? Math.ceil(number) : Math.floor(number);\n}","// copying some old stuff; this data integration approach is a bit mental right now: clearly the top 80% of this file should note be in calculang (everything above \"metrics\").\n// much of this can be neatly abstracted into a csv loader for calculang, but that might hide the Qs about performance/approach that I don't mind exposing now.\n\nimport data_string from 'raw-loader!../public/owid-covid-data-IRL.csv';\nimport { csvParse, autoType } from 'd3-dsv';\nimport { format, isSameDay, addDays } from 'date-fns';\n\nconst data = csvParse(data_string, autoType).map((d) => {\n  return {\n    date: new Date(format(d.date, 'yyyy-MM-dd')),\n    new_cases_smoothed: d.new_cases_smoothed,\n    new_deaths_smoothed: d.new_deaths_smoothed,\n    new_cases: d.new_cases,\n    new_deaths: d.new_deaths,\n  };\n});\n\nexport const data_date_extent = () => data[data.length - 1].date; // important, because data is hidden to applications\n\n// \"smoothed\" = 7 day avg.\n// Ireland only sends data once per week, which is an interesting effect I am watching for recent data\nexport const new_cases_smoothed = () =>\n  data.find((d) => isSameDay(d.date, t())).new_cases_smoothed;\n\nexport const new_deaths_smoothed = () =>\n  data.find((d) => isSameDay(d.date, t())).new_deaths_smoothed;\n\nexport const new_cases = () =>\n  data.find((d) => isSameDay(d.date, t())).new_cases;\n\nexport const new_deaths = () =>\n  data.find((d) => isSameDay(d.date, t())).new_deaths;\n\n// some metrics modelling:\n\nexport const new_cases_smoothed_lag_allowance = () =>\n  new_cases_smoothed({ t_in: addDays(t(), -lag()) });\n\nexport const new_cases_lag_allowance = () =>\n  new_cases({ t_in: addDays(t(), -lag()) });\n\n// cases 10 days ago / deaths (on 7 day avgs)\nexport const cases_deaths_link_smoothed = () =>\n  new_cases_smoothed_lag_allowance() / new_deaths_smoothed();\n\n// same, but using daily numbers\nexport const cases_deaths_link = () => new_cases_lag_allowance() / new_deaths();\n\nexport const lag = () => 10; // lag a constant 10 here\n\n// explicit inputs:\n// t should be a JS date\nexport const t = () => t_in;\n","import addLeadingZeros from \"../../addLeadingZeros/index.js\";\n/*\n * |     | Unit                           |     | Unit                           |\n * |-----|--------------------------------|-----|--------------------------------|\n * |  a  | AM, PM                         |  A* |                                |\n * |  d  | Day of month                   |  D  |                                |\n * |  h  | Hour [1-12]                    |  H  | Hour [0-23]                    |\n * |  m  | Minute                         |  M  | Month                          |\n * |  s  | Second                         |  S  | Fraction of second             |\n * |  y  | Year (abs)                     |  Y  |                                |\n *\n * Letters marked by * are not implemented but reserved by Unicode standard.\n */\n\nvar formatters = {\n  // Year\n  y: function (date, token) {\n    // From http://www.unicode.org/reports/tr35/tr35-31/tr35-dates.html#Date_Format_tokens\n    // | Year     |     y | yy |   yyy |  yyyy | yyyyy |\n    // |----------|-------|----|-------|-------|-------|\n    // | AD 1     |     1 | 01 |   001 |  0001 | 00001 |\n    // | AD 12    |    12 | 12 |   012 |  0012 | 00012 |\n    // | AD 123   |   123 | 23 |   123 |  0123 | 00123 |\n    // | AD 1234  |  1234 | 34 |  1234 |  1234 | 01234 |\n    // | AD 12345 | 12345 | 45 | 12345 | 12345 | 12345 |\n    var signedYear = date.getUTCFullYear(); // Returns 1 for 1 BC (which is year 0 in JavaScript)\n\n    var year = signedYear > 0 ? signedYear : 1 - signedYear;\n    return addLeadingZeros(token === 'yy' ? year % 100 : year, token.length);\n  },\n  // Month\n  M: function (date, token) {\n    var month = date.getUTCMonth();\n    return token === 'M' ? String(month + 1) : addLeadingZeros(month + 1, 2);\n  },\n  // Day of the month\n  d: function (date, token) {\n    return addLeadingZeros(date.getUTCDate(), token.length);\n  },\n  // AM or PM\n  a: function (date, token) {\n    var dayPeriodEnumValue = date.getUTCHours() / 12 >= 1 ? 'pm' : 'am';\n\n    switch (token) {\n      case 'a':\n      case 'aa':\n        return dayPeriodEnumValue.toUpperCase();\n\n      case 'aaa':\n        return dayPeriodEnumValue;\n\n      case 'aaaaa':\n        return dayPeriodEnumValue[0];\n\n      case 'aaaa':\n      default:\n        return dayPeriodEnumValue === 'am' ? 'a.m.' : 'p.m.';\n    }\n  },\n  // Hour [1-12]\n  h: function (date, token) {\n    return addLeadingZeros(date.getUTCHours() % 12 || 12, token.length);\n  },\n  // Hour [0-23]\n  H: function (date, token) {\n    return addLeadingZeros(date.getUTCHours(), token.length);\n  },\n  // Minute\n  m: function (date, token) {\n    return addLeadingZeros(date.getUTCMinutes(), token.length);\n  },\n  // Second\n  s: function (date, token) {\n    return addLeadingZeros(date.getUTCSeconds(), token.length);\n  },\n  // Fraction of second\n  S: function (date, token) {\n    var numberOfDigits = token.length;\n    var milliseconds = date.getUTCMilliseconds();\n    var fractionalSeconds = Math.floor(milliseconds * Math.pow(10, numberOfDigits - 3));\n    return addLeadingZeros(fractionalSeconds, token.length);\n  }\n};\nexport default formatters;","import toDate from \"../../toDate/index.js\";\nimport requiredArgs from \"../requiredArgs/index.js\";\nimport toInteger from \"../toInteger/index.js\"; // This function will be a part of public API when UTC function will be implemented.\n// See issue: https://github.com/date-fns/date-fns/issues/376\n\nexport default function startOfUTCWeek(dirtyDate, dirtyOptions) {\n  requiredArgs(1, arguments);\n  var options = dirtyOptions || {};\n  var locale = options.locale;\n  var localeWeekStartsOn = locale && locale.options && locale.options.weekStartsOn;\n  var defaultWeekStartsOn = localeWeekStartsOn == null ? 0 : toInteger(localeWeekStartsOn);\n  var weekStartsOn = options.weekStartsOn == null ? defaultWeekStartsOn : toInteger(options.weekStartsOn); // Test if weekStartsOn is between 0 and 6 _and_ is not NaN\n\n  if (!(weekStartsOn >= 0 && weekStartsOn <= 6)) {\n    throw new RangeError('weekStartsOn must be between 0 and 6 inclusively');\n  }\n\n  var date = toDate(dirtyDate);\n  var day = date.getUTCDay();\n  var diff = (day < weekStartsOn ? 7 : 0) + day - weekStartsOn;\n  date.setUTCDate(date.getUTCDate() - diff);\n  date.setUTCHours(0, 0, 0, 0);\n  return date;\n}","import toDate from \"../../toDate/index.js\";\nimport requiredArgs from \"../requiredArgs/index.js\"; // This function will be a part of public API when UTC function will be implemented.\n// See issue: https://github.com/date-fns/date-fns/issues/376\n\nexport default function startOfUTCISOWeek(dirtyDate) {\n  requiredArgs(1, arguments);\n  var weekStartsOn = 1;\n  var date = toDate(dirtyDate);\n  var day = date.getUTCDay();\n  var diff = (day < weekStartsOn ? 7 : 0) + day - weekStartsOn;\n  date.setUTCDate(date.getUTCDate() - diff);\n  date.setUTCHours(0, 0, 0, 0);\n  return date;\n}","export default function buildLocalizeFn(args) {\n  return function (dirtyIndex, dirtyOptions) {\n    var options = dirtyOptions || {};\n    var context = options.context ? String(options.context) : 'standalone';\n    var valuesArray;\n\n    if (context === 'formatting' && args.formattingValues) {\n      var defaultWidth = args.defaultFormattingWidth || args.defaultWidth;\n      var width = options.width ? String(options.width) : defaultWidth;\n      valuesArray = args.formattingValues[width] || args.formattingValues[defaultWidth];\n    } else {\n      var _defaultWidth = args.defaultWidth;\n\n      var _width = options.width ? String(options.width) : args.defaultWidth;\n\n      valuesArray = args.values[_width] || args.values[_defaultWidth];\n    }\n\n    var index = args.argumentCallback ? args.argumentCallback(dirtyIndex) : dirtyIndex; // @ts-ignore: For some reason TypeScript just don't want to match it, no matter how hard we try. I challenge you to try to remove it!\n\n    return valuesArray[index];\n  };\n}","export default function buildMatchFn(args) {\n  return function (string) {\n    var options = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : {};\n    var width = options.width;\n    var matchPattern = width && args.matchPatterns[width] || args.matchPatterns[args.defaultMatchWidth];\n    var matchResult = string.match(matchPattern);\n\n    if (!matchResult) {\n      return null;\n    }\n\n    var matchedString = matchResult[0];\n    var parsePatterns = width && args.parsePatterns[width] || args.parsePatterns[args.defaultParseWidth];\n    var key = Array.isArray(parsePatterns) ? findIndex(parsePatterns, function (pattern) {\n      return pattern.test(matchedString);\n    }) : findKey(parsePatterns, function (pattern) {\n      return pattern.test(matchedString);\n    });\n    var value;\n    value = args.valueCallback ? args.valueCallback(key) : key;\n    value = options.valueCallback ? options.valueCallback(value) : value;\n    var rest = string.slice(matchedString.length);\n    return {\n      value: value,\n      rest: rest\n    };\n  };\n}\n\nfunction findKey(object, predicate) {\n  for (var key in object) {\n    if (object.hasOwnProperty(key) && predicate(object[key])) {\n      return key;\n    }\n  }\n\n  return undefined;\n}\n\nfunction findIndex(array, predicate) {\n  for (var key = 0; key < array.length; key++) {\n    if (predicate(array[key])) {\n      return key;\n    }\n  }\n\n  return undefined;\n}","var protectedDayOfYearTokens = ['D', 'DD'];\nvar protectedWeekYearTokens = ['YY', 'YYYY'];\nexport function isProtectedDayOfYearToken(token) {\n  return protectedDayOfYearTokens.indexOf(token) !== -1;\n}\nexport function isProtectedWeekYearToken(token) {\n  return protectedWeekYearTokens.indexOf(token) !== -1;\n}\nexport function throwProtectedError(token, format, input) {\n  if (token === 'YYYY') {\n    throw new RangeError(\"Use `yyyy` instead of `YYYY` (in `\".concat(format, \"`) for formatting years to the input `\").concat(input, \"`; see: https://git.io/fxCyr\"));\n  } else if (token === 'YY') {\n    throw new RangeError(\"Use `yy` instead of `YY` (in `\".concat(format, \"`) for formatting years to the input `\").concat(input, \"`; see: https://git.io/fxCyr\"));\n  } else if (token === 'D') {\n    throw new RangeError(\"Use `d` instead of `D` (in `\".concat(format, \"`) for formatting days of the month to the input `\").concat(input, \"`; see: https://git.io/fxCyr\"));\n  } else if (token === 'DD') {\n    throw new RangeError(\"Use `dd` instead of `DD` (in `\".concat(format, \"`) for formatting days of the month to the input `\").concat(input, \"`; see: https://git.io/fxCyr\"));\n  }\n}","import { /* long list coming up, eventually use all_cul keyword instead: calculang issue #13 */ new_cases_smoothed, new_deaths_smoothed, new_cases, new_deaths, cases_deaths_link_smoothed, cases_deaths_link, data_date_extent, new_cases_smoothed_lag_allowance, new_cases_lag_allowance } from './IRL-stats.cul.js';\nexport { /* \"\" */ new_cases_smoothed, new_deaths_smoothed, new_cases, new_deaths, cases_deaths_link_smoothed, cases_deaths_link, data_date_extent, new_cases_smoothed_lag_allowance, new_cases_lag_allowance };\n\n// I'm deliberately implementing variable-lag in a model-of- the base IRL-stats calculang model, where lag is a constant 10. I could easily alter that model instead (but => reflect change in applications).\n  \n// In this model we import the base model above, and we override the lag formula (below).\n// The below definition will take precedence in the final model and bundle (it's defined closer to the model entrypoint or 'model root').\n  \nexport const lag = () => (lag_in); // in the model-of-model lag for the base model is now an input (even though I should just move lag in IRL-stats to an input; happy to make this a simple modular example instead)\n","import toDate from \"../../toDate/index.js\";\nimport requiredArgs from \"../requiredArgs/index.js\";\nimport startOfUTCWeek from \"../startOfUTCWeek/index.js\";\nimport toInteger from \"../toInteger/index.js\"; // This function will be a part of public API when UTC function will be implemented.\n// See issue: https://github.com/date-fns/date-fns/issues/376\n\nexport default function getUTCWeekYear(dirtyDate, dirtyOptions) {\n  requiredArgs(1, arguments);\n  var date = toDate(dirtyDate);\n  var year = date.getUTCFullYear();\n  var options = dirtyOptions || {};\n  var locale = options.locale;\n  var localeFirstWeekContainsDate = locale && locale.options && locale.options.firstWeekContainsDate;\n  var defaultFirstWeekContainsDate = localeFirstWeekContainsDate == null ? 1 : toInteger(localeFirstWeekContainsDate);\n  var firstWeekContainsDate = options.firstWeekContainsDate == null ? defaultFirstWeekContainsDate : toInteger(options.firstWeekContainsDate); // Test if weekStartsOn is between 1 and 7 _and_ is not NaN\n\n  if (!(firstWeekContainsDate >= 1 && firstWeekContainsDate <= 7)) {\n    throw new RangeError('firstWeekContainsDate must be between 1 and 7 inclusively');\n  }\n\n  var firstWeekOfNextYear = new Date(0);\n  firstWeekOfNextYear.setUTCFullYear(year + 1, 0, firstWeekContainsDate);\n  firstWeekOfNextYear.setUTCHours(0, 0, 0, 0);\n  var startOfNextYear = startOfUTCWeek(firstWeekOfNextYear, dirtyOptions);\n  var firstWeekOfThisYear = new Date(0);\n  firstWeekOfThisYear.setUTCFullYear(year, 0, firstWeekContainsDate);\n  firstWeekOfThisYear.setUTCHours(0, 0, 0, 0);\n  var startOfThisYear = startOfUTCWeek(firstWeekOfThisYear, dirtyOptions);\n\n  if (date.getTime() >= startOfNextYear.getTime()) {\n    return year + 1;\n  } else if (date.getTime() >= startOfThisYear.getTime()) {\n    return year;\n  } else {\n    return year - 1;\n  }\n}","import toDate from \"../../toDate/index.js\";\nimport requiredArgs from \"../requiredArgs/index.js\";\nimport startOfUTCISOWeek from \"../startOfUTCISOWeek/index.js\"; // This function will be a part of public API when UTC function will be implemented.\n// See issue: https://github.com/date-fns/date-fns/issues/376\n\nexport default function getUTCISOWeekYear(dirtyDate) {\n  requiredArgs(1, arguments);\n  var date = toDate(dirtyDate);\n  var year = date.getUTCFullYear();\n  var fourthOfJanuaryOfNextYear = new Date(0);\n  fourthOfJanuaryOfNextYear.setUTCFullYear(year + 1, 0, 4);\n  fourthOfJanuaryOfNextYear.setUTCHours(0, 0, 0, 0);\n  var startOfNextYear = startOfUTCISOWeek(fourthOfJanuaryOfNextYear);\n  var fourthOfJanuaryOfThisYear = new Date(0);\n  fourthOfJanuaryOfThisYear.setUTCFullYear(year, 0, 4);\n  fourthOfJanuaryOfThisYear.setUTCHours(0, 0, 0, 0);\n  var startOfThisYear = startOfUTCISOWeek(fourthOfJanuaryOfThisYear);\n\n  if (date.getTime() >= startOfNextYear.getTime()) {\n    return year + 1;\n  } else if (date.getTime() >= startOfThisYear.getTime()) {\n    return year;\n  } else {\n    return year - 1;\n  }\n}","export default function buildFormatLongFn(args) {\n  return function () {\n    var options = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : {};\n    // TODO: Remove String()\n    var width = options.width ? String(options.width) : args.defaultWidth;\n    var format = args.formats[width] || args.formats[args.defaultWidth];\n    return format;\n  };\n}","import startOfDay from \"../startOfDay/index.js\";\nimport requiredArgs from \"../_lib/requiredArgs/index.js\";\n/**\n * @name isSameDay\n * @category Day Helpers\n * @summary Are the given dates in the same day (and year and month)?\n *\n * @description\n * Are the given dates in the same day (and year and month)?\n *\n * ### v2.0.0 breaking changes:\n *\n * - [Changes that are common for the whole library](https://github.com/date-fns/date-fns/blob/master/docs/upgradeGuide.md#Common-Changes).\n *\n * @param {Date|Number} dateLeft - the first date to check\n * @param {Date|Number} dateRight - the second date to check\n * @returns {Boolean} the dates are in the same day (and year and month)\n * @throws {TypeError} 2 arguments required\n *\n * @example\n * // Are 4 September 06:00:00 and 4 September 18:00:00 in the same day?\n * var result = isSameDay(new Date(2014, 8, 4, 6, 0), new Date(2014, 8, 4, 18, 0))\n * //=> true\n * \n * @example\n * // Are 4 September and 4 October in the same day?\n * var result = isSameDay(new Date(2014, 8, 4), new Date(2014, 9, 4))\n * //=> false\n * \n * @example\n * // Are 4 September, 2014 and 4 September, 2015 in the same day?\n * var result = isSameDay(new Date(2014, 8, 4), new Date(2015, 8, 4))\n * //=> false\n */\n\nexport default function isSameDay(dirtyDateLeft, dirtyDateRight) {\n  requiredArgs(2, arguments);\n  var dateLeftStartOfDay = startOfDay(dirtyDateLeft);\n  var dateRightStartOfDay = startOfDay(dirtyDateRight);\n  return dateLeftStartOfDay.getTime() === dateRightStartOfDay.getTime();\n}","import toDate from \"../toDate/index.js\";\nimport requiredArgs from \"../_lib/requiredArgs/index.js\";\n/**\n * @name startOfDay\n * @category Day Helpers\n * @summary Return the start of a day for the given date.\n *\n * @description\n * Return the start of a day for the given date.\n * The result will be in the local timezone.\n *\n * ### v2.0.0 breaking changes:\n *\n * - [Changes that are common for the whole library](https://github.com/date-fns/date-fns/blob/master/docs/upgradeGuide.md#Common-Changes).\n *\n * @param {Date|Number} date - the original date\n * @returns {Date} the start of a day\n * @throws {TypeError} 1 argument required\n *\n * @example\n * // The start of a day for 2 September 2014 11:55:00:\n * const result = startOfDay(new Date(2014, 8, 2, 11, 55, 0))\n * //=> Tue Sep 02 2014 00:00:00\n */\n\nexport default function startOfDay(dirtyDate) {\n  requiredArgs(1, arguments);\n  var date = toDate(dirtyDate);\n  date.setHours(0, 0, 0, 0);\n  return date;\n}","export default \"iso_code,date,new_cases_smoothed,new_cases,new_deaths_smoothed,new_deaths\\r\\nIRL,2020-02-29,,1.0,,\\r\\nIRL,2020-03-01,,0.0,,\\r\\nIRL,2020-03-02,,0.0,,\\r\\nIRL,2020-03-03,,1.0,,\\r\\nIRL,2020-03-04,,4.0,,\\r\\nIRL,2020-03-05,0.857,0.0,,\\r\\nIRL,2020-03-06,2.571,12.0,,\\r\\nIRL,2020-03-07,2.429,0.0,,\\r\\nIRL,2020-03-08,2.571,1.0,,\\r\\nIRL,2020-03-09,2.857,2.0,,\\r\\nIRL,2020-03-10,4.571,13.0,,\\r\\nIRL,2020-03-11,5.286,9.0,,1.0\\r\\nIRL,2020-03-12,5.286,0.0,,0.0\\r\\nIRL,2020-03-13,10.286,47.0,,0.0\\r\\nIRL,2020-03-14,15.857,39.0,,1.0\\r\\nIRL,2020-03-15,15.714,0.0,,0.0\\r\\nIRL,2020-03-16,21.143,40.0,0.286,0.0\\r\\nIRL,2020-03-17,27.0,54.0,0.286,0.0\\r\\nIRL,2020-03-18,35.571,69.0,0.143,0.0\\r\\nIRL,2020-03-19,73.429,265.0,0.286,1.0\\r\\nIRL,2020-03-20,84.714,126.0,0.286,0.0\\r\\nIRL,2020-03-21,93.714,102.0,0.143,0.0\\r\\nIRL,2020-03-22,111.0,121.0,0.286,1.0\\r\\nIRL,2020-03-23,136.571,219.0,0.571,2.0\\r\\nIRL,2020-03-24,158.0,204.0,0.714,1.0\\r\\nIRL,2020-03-25,181.714,235.0,1.0,2.0\\r\\nIRL,2020-03-26,180.286,255.0,2.286,10.0\\r\\nIRL,2020-03-27,205.429,302.0,2.714,3.0\\r\\nIRL,2020-03-28,232.857,294.0,4.714,14.0\\r\\nIRL,2020-03-29,244.143,200.0,6.0,10.0\\r\\nIRL,2020-03-30,255.0,295.0,6.857,8.0\\r\\nIRL,2020-03-31,272.286,325.0,9.143,17.0\\r\\nIRL,2020-04-01,269.0,212.0,10.857,14.0\\r\\nIRL,2020-04-02,290.0,402.0,11.286,13.0\\r\\nIRL,2020-04-03,307.429,424.0,14.0,22.0\\r\\nIRL,2020-04-04,312.714,331.0,14.429,17.0\\r\\nIRL,2020-04-05,339.857,390.0,16.0,21.0\\r\\nIRL,2020-04-06,350.571,370.0,17.143,16.0\\r\\nIRL,2020-04-07,353.429,345.0,19.857,36.0\\r\\nIRL,2020-04-08,375.286,365.0,21.429,25.0\\r\\nIRL,2020-04-09,389.286,500.0,23.571,28.0\\r\\nIRL,2020-04-10,545.143,1515.0,23.857,24.0\\r\\nIRL,2020-04-11,617.714,839.0,26.143,33.0\\r\\nIRL,2020-04-12,665.857,727.0,25.143,14.0\\r\\nIRL,2020-04-13,754.714,992.0,27.286,31.0\\r\\nIRL,2020-04-14,824.286,832.0,28.0,41.0\\r\\nIRL,2020-04-15,924.714,1068.0,29.857,38.0\\r\\nIRL,2020-04-16,956.714,724.0,31.857,42.0\\r\\nIRL,2020-04-17,841.571,709.0,34.714,44.0\\r\\nIRL,2020-04-18,832.857,778.0,35.857,41.0\\r\\nIRL,2020-04-19,799.429,493.0,39.429,39.0\\r\\nIRL,2020-04-20,715.0,401.0,46.0,77.0\\r\\nIRL,2020-04-21,651.571,388.0,46.286,43.0\\r\\nIRL,2020-04-22,589.143,631.0,46.429,39.0\\r\\nIRL,2020-04-23,619.429,936.0,44.0,25.0\\r\\nIRL,2020-04-24,600.571,577.0,69.143,220.0\\r\\nIRL,2020-04-25,543.286,377.0,70.286,49.0\\r\\nIRL,2020-04-26,573.0,701.0,68.143,24.0\\r\\nIRL,2020-04-27,570.857,386.0,59.286,15.0\\r\\nIRL,2020-04-28,548.143,229.0,61.286,57.0\\r\\nIRL,2020-04-29,511.714,376.0,60.143,31.0\\r\\nIRL,2020-04-30,429.286,359.0,62.571,42.0\\r\\nIRL,2020-05-01,378.429,221.0,35.857,33.0\\r\\nIRL,2020-05-02,373.571,343.0,31.857,21.0\\r\\nIRL,2020-05-03,320.571,330.0,30.857,17.0\\r\\nIRL,2020-05-04,303.429,266.0,31.0,16.0\\r\\nIRL,2020-05-05,300.857,211.0,25.714,20.0\\r\\nIRL,2020-05-06,285.0,265.0,26.429,36.0\\r\\nIRL,2020-05-07,253.286,137.0,24.429,28.0\\r\\nIRL,2020-05-08,244.0,156.0,23.429,26.0\\r\\nIRL,2020-05-09,226.286,219.0,22.857,17.0\\r\\nIRL,2020-05-10,212.857,236.0,22.143,12.0\\r\\nIRL,2020-05-11,194.714,139.0,21.143,9.0\\r\\nIRL,2020-05-12,179.857,107.0,21.286,21.0\\r\\nIRL,2020-05-13,164.714,159.0,17.429,9.0\\r\\nIRL,2020-05-14,206.0,426.0,14.714,9.0\\r\\nIRL,2020-05-15,202.143,129.0,12.714,12.0\\r\\nIRL,2020-05-16,184.0,92.0,12.429,15.0\\r\\nIRL,2020-05-17,159.429,64.0,12.143,10.0\\r\\nIRL,2020-05-18,152.143,88.0,11.429,4.0\\r\\nIRL,2020-05-19,144.143,51.0,10.429,14.0\\r\\nIRL,2020-05-20,130.571,64.0,10.571,10.0\\r\\nIRL,2020-05-21,80.571,76.0,11.0,12.0\\r\\nIRL,2020-05-22,78.571,115.0,10.571,9.0\\r\\nIRL,2020-05-23,76.286,76.0,10.143,12.0\\r\\nIRL,2020-05-24,75.286,57.0,9.286,4.0\\r\\nIRL,2020-05-25,71.143,59.0,,\\r\\nIRL,2020-05-26,69.143,37.0,8.0,9.0\\r\\nIRL,2020-05-27,69.714,68.0,8.857,16.0\\r\\nIRL,2020-05-28,64.286,38.0,8.286,8.0\\r\\nIRL,2020-05-29,52.857,35.0,7.857,6.0\\r\\nIRL,2020-05-30,49.571,53.0,7.0,6.0\\r\\nIRL,2020-05-31,50.143,61.0,6.571,1.0\\r\\nIRL,2020-06-01,52.0,72.0,,\\r\\nIRL,2020-06-02,47.286,4.0,6.429,8.0\\r\\nIRL,2020-06-03,44.0,45.0,4.286,1.0\\r\\nIRL,2020-06-04,43.0,31.0,3.857,5.0\\r\\nIRL,2020-06-05,41.0,21.0,3.857,6.0\\r\\nIRL,2020-06-06,36.286,20.0,4.143,8.0\\r\\nIRL,2020-06-07,30.143,18.0,4.143,1.0\\r\\nIRL,2020-06-08,20.714,6.0,4.714,4.0\\r\\nIRL,2020-06-09,21.286,8.0,4.714,8.0\\r\\nIRL,2020-06-10,17.143,16.0,5.143,4.0\\r\\nIRL,2020-06-11,13.714,7.0,5.571,8.0\\r\\nIRL,2020-06-12,12.429,12.0,5.0,2.0\\r\\nIRL,2020-06-13,16.0,45.0,3.857,0.0\\r\\nIRL,2020-06-14,14.571,8.0,3.857,1.0\\r\\nIRL,2020-06-15,16.286,18.0,3.286,0.0\\r\\nIRL,2020-06-16,17.0,13.0,2.571,3.0\\r\\nIRL,2020-06-17,15.714,7.0,2.143,1.0\\r\\nIRL,2020-06-18,16.714,14.0,1.571,4.0\\r\\nIRL,2020-06-19,16.857,13.0,1.286,0.0\\r\\nIRL,2020-06-20,11.286,6.0,1.429,1.0\\r\\nIRL,2020-06-21,10.857,5.0,1.286,0.0\\r\\nIRL,2020-06-22,8.857,4.0,1.571,2.0\\r\\nIRL,2020-06-23,8.143,8.0,1.571,3.0\\r\\nIRL,2020-06-24,7.857,5.0,2.286,6.0\\r\\nIRL,2020-06-25,7.143,9.0,1.857,1.0\\r\\nIRL,2020-06-26,6.571,9.0,2.286,3.0\\r\\nIRL,2020-06-27,9.0,23.0,2.714,4.0\\r\\nIRL,2020-06-28,8.571,2.0,2.857,1.0\\r\\nIRL,2020-06-29,11.286,23.0,2.571,0.0\\r\\nIRL,2020-06-30,11.714,11.0,2.286,1.0\\r\\nIRL,2020-07-01,11.571,4.0,1.714,2.0\\r\\nIRL,2020-07-02,12.0,12.0,1.571,0.0\\r\\nIRL,2020-07-03,12.0,9.0,1.429,2.0\\r\\nIRL,2020-07-04,10.286,11.0,1.0,1.0\\r\\nIRL,2020-07-05,12.571,18.0,0.857,0.0\\r\\nIRL,2020-07-06,9.857,4.0,0.857,0.0\\r\\nIRL,2020-07-07,9.286,7.0,0.857,1.0\\r\\nIRL,2020-07-08,9.286,4.0,,\\r\\nIRL,2020-07-09,10.857,23.0,1.286,5.0\\r\\nIRL,2020-07-10,13.0,24.0,1.143,1.0\\r\\nIRL,2020-07-11,14.571,22.0,1.286,2.0\\r\\nIRL,2020-07-12,14.429,17.0,1.286,0.0\\r\\nIRL,2020-07-13,15.286,10.0,1.286,0.0\\r\\nIRL,2020-07-14,18.857,32.0,1.143,0.0\\r\\nIRL,2020-07-15,20.143,13.0,1.429,2.0\\r\\nIRL,2020-07-16,19.0,15.0,0.857,1.0\\r\\nIRL,2020-07-17,20.143,32.0,1.143,3.0\\r\\nIRL,2020-07-18,19.857,20.0,1.0,1.0\\r\\nIRL,2020-07-19,18.857,10.0,1.0,0.0\\r\\nIRL,2020-07-20,18.286,6.0,1.0,0.0\\r\\nIRL,2020-07-21,18.857,36.0,1.0,0.0\\r\\nIRL,2020-07-22,19.429,17.0,0.857,1.0\\r\\nIRL,2020-07-23,18.286,7.0,2.0,9.0\\r\\nIRL,2020-07-24,16.429,19.0,1.571,0.0\\r\\nIRL,2020-07-25,17.0,24.0,1.571,1.0\\r\\nIRL,2020-07-26,17.286,12.0,1.571,0.0\\r\\nIRL,2020-07-27,18.0,11.0,1.571,0.0\\r\\nIRL,2020-07-28,18.143,37.0,1.571,0.0\\r\\nIRL,2020-07-29,17.571,13.0,1.429,0.0\\r\\nIRL,2020-07-30,28.714,85.0,,\\r\\nIRL,2020-07-31,31.429,38.0,0.143,0.0\\r\\nIRL,2020-08-01,34.286,44.0,0.0,0.0\\r\\nIRL,2020-08-02,40.143,53.0,0.0,0.0\\r\\nIRL,2020-08-03,45.143,46.0,0.0,0.0\\r\\nIRL,2020-08-04,46.286,45.0,0.0,0.0\\r\\nIRL,2020-08-05,51.571,50.0,0.0,0.0\\r\\nIRL,2020-08-06,49.286,69.0,0.714,5.0\\r\\nIRL,2020-08-07,57.857,98.0,1.286,4.0\\r\\nIRL,2020-08-08,76.429,174.0,1.286,0.0\\r\\nIRL,2020-08-09,78.571,68.0,1.286,0.0\\r\\nIRL,2020-08-10,80.0,56.0,1.286,0.0\\r\\nIRL,2020-08-11,78.286,33.0,1.429,1.0\\r\\nIRL,2020-08-12,76.429,37.0,1.571,1.0\\r\\nIRL,2020-08-13,79.571,91.0,0.857,0.0\\r\\nIRL,2020-08-14,75.0,66.0,0.286,0.0\\r\\nIRL,2020-08-15,78.143,196.0,0.286,0.0\\r\\nIRL,2020-08-16,77.857,66.0,0.286,0.0\\r\\nIRL,2020-08-17,77.857,56.0,0.286,0.0\\r\\nIRL,2020-08-18,99.714,186.0,0.286,1.0\\r\\nIRL,2020-08-19,101.286,48.0,0.143,0.0\\r\\nIRL,2020-08-20,106.714,129.0,0.286,1.0\\r\\nIRL,2020-08-21,108.571,79.0,0.286,0.0\\r\\nIRL,2020-08-22,102.429,153.0,0.429,1.0\\r\\nIRL,2020-08-23,101.714,61.0,0.429,0.0\\r\\nIRL,2020-08-24,114.714,147.0,0.429,0.0\\r\\nIRL,2020-08-25,100.286,85.0,0.286,0.0\\r\\nIRL,2020-08-26,116.571,162.0,0.286,0.0\\r\\nIRL,2020-08-27,111.0,90.0,0.143,0.0\\r\\nIRL,2020-08-28,117.571,125.0,0.143,0.0\\r\\nIRL,2020-08-29,116.0,142.0,0.0,0.0\\r\\nIRL,2020-08-30,113.0,40.0,0.0,0.0\\r\\nIRL,2020-08-31,99.286,51.0,0.0,0.0\\r\\nIRL,2020-09-01,117.714,214.0,0.0,0.0\\r\\nIRL,2020-09-02,107.286,89.0,0.0,0.0\\r\\nIRL,2020-09-03,107.571,92.0,0.0,0.0\\r\\nIRL,2020-09-04,103.571,97.0,0.0,0.0\\r\\nIRL,2020-09-05,116.286,231.0,0.0,0.0\\r\\nIRL,2020-09-06,130.286,138.0,0.0,0.0\\r\\nIRL,2020-09-07,137.571,102.0,0.0,0.0\\r\\nIRL,2020-09-08,150.714,306.0,0.143,1.0\\r\\nIRL,2020-09-09,150.0,84.0,0.571,3.0\\r\\nIRL,2020-09-10,164.857,196.0,0.571,0.0\\r\\nIRL,2020-09-11,181.143,211.0,0.571,0.0\\r\\nIRL,2020-09-12,170.857,159.0,0.857,2.0\\r\\nIRL,2020-09-13,187.571,255.0,1.0,1.0\\r\\nIRL,2020-09-14,202.571,207.0,1.0,0.0\\r\\nIRL,2020-09-15,209.857,357.0,1.286,3.0\\r\\nIRL,2020-09-16,233.571,250.0,1.0,1.0\\r\\nIRL,2020-09-17,237.571,224.0,1.143,1.0\\r\\nIRL,2020-09-18,242.857,248.0,1.571,3.0\\r\\nIRL,2020-09-19,258.286,267.0,1.286,0.0\\r\\nIRL,2020-09-20,278.286,395.0,1.143,0.0\\r\\nIRL,2020-09-21,275.571,188.0,1.143,0.0\\r\\nIRL,2020-09-22,270.714,323.0,0.714,0.0\\r\\nIRL,2020-09-23,268.0,231.0,0.857,2.0\\r\\nIRL,2020-09-24,281.571,319.0,1.143,3.0\\r\\nIRL,2020-09-25,292.0,321.0,0.714,0.0\\r\\nIRL,2020-09-26,288.857,245.0,1.429,5.0\\r\\nIRL,2020-09-27,293.857,430.0,1.429,0.0\\r\\nIRL,2020-09-28,322.286,387.0,1.429,0.0\\r\\nIRL,2020-09-29,328.0,363.0,1.571,1.0\\r\\nIRL,2020-09-30,354.286,415.0,1.429,1.0\\r\\nIRL,2020-10-01,371.857,442.0,1.286,2.0\\r\\nIRL,2020-10-02,392.571,466.0,,\\r\\nIRL,2020-10-03,444.0,605.0,1.857,9.0\\r\\nIRL,2020-10-04,434.571,364.0,1.857,0.0\\r\\nIRL,2020-10-05,453.143,517.0,1.857,0.0\\r\\nIRL,2020-10-06,461.857,424.0,1.857,1.0\\r\\nIRL,2020-10-07,489.857,611.0,2.429,5.0\\r\\nIRL,2020-10-08,498.429,502.0,2.286,1.0\\r\\nIRL,2020-10-09,520.0,617.0,2.857,4.0\\r\\nIRL,2020-10-10,578.0,1011.0,2.0,3.0\\r\\nIRL,2020-10-11,642.286,814.0,2.286,2.0\\r\\nIRL,2020-10-12,686.0,823.0,2.429,1.0\\r\\nIRL,2020-10-13,740.857,808.0,2.714,3.0\\r\\nIRL,2020-10-14,808.429,1084.0,2.714,5.0\\r\\nIRL,2020-10-15,906.143,1186.0,3.0,3.0\\r\\nIRL,2020-10-16,960.571,998.0,2.857,3.0\\r\\nIRL,2020-10-17,994.857,1251.0,3.571,8.0\\r\\nIRL,2020-10-18,1062.0,1284.0,3.714,3.0\\r\\nIRL,2020-10-19,1091.714,1031.0,3.571,0.0\\r\\nIRL,2020-10-20,1156.714,1263.0,5.0,13.0\\r\\nIRL,2020-10-21,1168.429,1166.0,4.714,3.0\\r\\nIRL,2020-10-22,1149.571,1054.0,4.714,3.0\\r\\nIRL,2020-10-23,1119.143,785.0,5.286,7.0\\r\\nIRL,2020-10-24,1061.429,847.0,4.714,4.0\\r\\nIRL,2020-10-25,1023.714,1020.0,4.286,0.0\\r\\nIRL,2020-10-26,1010.571,939.0,4.714,3.0\\r\\nIRL,2020-10-27,930.143,700.0,3.571,5.0\\r\\nIRL,2020-10-28,858.857,667.0,4.0,6.0\\r\\nIRL,2020-10-29,831.571,863.0,4.429,6.0\\r\\nIRL,2020-10-30,828.286,762.0,4.286,6.0\\r\\nIRL,2020-10-31,764.0,397.0,4.429,5.0\\r\\nIRL,2020-11-01,696.286,546.0,4.714,2.0\\r\\nIRL,2020-11-02,669.0,748.0,4.571,2.0\\r\\nIRL,2020-11-03,611.571,298.0,4.571,5.0\\r\\nIRL,2020-11-04,578.429,435.0,4.857,8.0\\r\\nIRL,2020-11-05,535.571,563.0,4.429,3.0\\r\\nIRL,2020-11-06,497.0,492.0,4.571,7.0\\r\\nIRL,2020-11-07,485.571,317.0,4.571,5.0\\r\\nIRL,2020-11-08,484.571,539.0,4.571,2.0\\r\\nIRL,2020-11-09,415.571,265.0,4.429,1.0\\r\\nIRL,2020-11-10,405.857,230.0,5.857,15.0\\r\\nIRL,2020-11-11,394.857,358.0,5.0,2.0\\r\\nIRL,2020-11-12,369.429,385.0,4.571,0.0\\r\\nIRL,2020-11-13,365.857,467.0,4.571,7.0\\r\\nIRL,2020-11-14,381.571,427.0,4.714,6.0\\r\\nIRL,2020-11-15,358.429,377.0,4.571,1.0\\r\\nIRL,2020-11-16,385.286,453.0,5.143,5.0\\r\\nIRL,2020-11-17,399.571,330.0,4.571,11.0\\r\\nIRL,2020-11-18,401.571,372.0,5.857,11.0\\r\\nIRL,2020-11-19,405.857,415.0,6.429,4.0\\r\\nIRL,2020-11-20,386.143,329.0,6.571,8.0\\r\\nIRL,2020-11-21,373.857,341.0,6.286,4.0\\r\\nIRL,2020-11-22,365.429,318.0,6.286,1.0\\r\\nIRL,2020-11-23,336.429,250.0,5.571,0.0\\r\\nIRL,2020-11-24,320.571,219.0,4.714,5.0\\r\\nIRL,2020-11-25,304.143,257.0,3.857,5.0\\r\\nIRL,2020-11-26,288.714,307.0,3.714,3.0\\r\\nIRL,2020-11-27,271.0,205.0,3.571,7.0\\r\\nIRL,2020-11-28,257.0,243.0,4.0,7.0\\r\\nIRL,2020-11-29,254.286,299.0,4.143,2.0\\r\\nIRL,2020-11-30,261.857,303.0,4.286,1.0\\r\\nIRL,2020-12-01,266.857,254.0,5.857,16.0\\r\\nIRL,2020-12-02,268.429,268.0,5.857,5.0\\r\\nIRL,2020-12-03,247.714,162.0,6.286,6.0\\r\\nIRL,2020-12-04,256.0,263.0,6.143,6.0\\r\\nIRL,2020-12-05,286.571,457.0,7.0,13.0\\r\\nIRL,2020-12-06,286.429,298.0,6.714,0.0\\r\\nIRL,2020-12-07,274.857,222.0,6.571,0.0\\r\\nIRL,2020-12-08,269.143,214.0,,\\r\\nIRL,2020-12-09,262.0,218.0,4.286,5.0\\r\\nIRL,2020-12-10,282.143,303.0,5.571,15.0\\r\\nIRL,2020-12-11,288.0,304.0,5.143,3.0\\r\\nIRL,2020-12-12,258.286,249.0,3.714,3.0\\r\\nIRL,2020-12-13,277.0,429.0,3.857,1.0\\r\\nIRL,2020-12-14,283.0,264.0,4.143,2.0\\r\\nIRL,2020-12-15,299.143,327.0,5.286,8.0\\r\\nIRL,2020-12-16,328.143,421.0,5.429,6.0\\r\\nIRL,2020-12-17,353.571,481.0,3.714,3.0\\r\\nIRL,2020-12-18,392.429,576.0,4.143,6.0\\r\\nIRL,2020-12-19,431.429,522.0,4.429,5.0\\r\\nIRL,2020-12-20,479.571,766.0,4.857,4.0\\r\\nIRL,2020-12-21,545.429,725.0,4.571,0.0\\r\\nIRL,2020-12-22,636.0,961.0,5.286,13.0\\r\\nIRL,2020-12-23,708.286,927.0,6.286,13.0\\r\\nIRL,2020-12-24,770.714,918.0,7.0,8.0\\r\\nIRL,2020-12-25,834.857,1025.0,6.429,2.0\\r\\nIRL,2020-12-26,945.429,1296.0,6.571,6.0\\r\\nIRL,2020-12-27,941.0,735.0,6.571,4.0\\r\\nIRL,2020-12-28,946.714,765.0,6.714,1.0\\r\\nIRL,2020-12-29,1030.143,1545.0,6.0,8.0\\r\\nIRL,2020-12-30,1143.143,1718.0,6.0,13.0\\r\\nIRL,2020-12-31,1243.714,1622.0,6.429,11.0\\r\\nIRL,2021-01-01,1347.714,1753.0,7.714,11.0\\r\\nIRL,2021-01-02,1647.429,3394.0,7.429,4.0\\r\\nIRL,2021-01-03,2251.143,4961.0,7.857,7.0\\r\\nIRL,2021-01-04,3014.714,6110.0,8.571,6.0\\r\\nIRL,2021-01-05,3554.714,5325.0,9.857,17.0\\r\\nIRL,2021-01-06,4428.143,7832.0,10.429,17.0\\r\\nIRL,2021-01-07,5125.429,6503.0,10.0,8.0\\r\\nIRL,2021-01-08,6050.286,8227.0,11.286,20.0\\r\\nIRL,2021-01-09,6257.286,4843.0,12.0,9.0\\r\\nIRL,2021-01-10,6532.286,6886.0,12.143,8.0\\r\\nIRL,2021-01-11,6363.143,4926.0,12.429,8.0\\r\\nIRL,2021-01-12,6038.429,3052.0,16.429,45.0\\r\\nIRL,2021-01-13,5427.143,3553.0,23.0,63.0\\r\\nIRL,2021-01-14,5057.143,3913.0,25.857,28.0\\r\\nIRL,2021-01-15,4380.571,3491.0,29.857,48.0\\r\\nIRL,2021-01-16,4150.429,3232.0,37.0,59.0\\r\\nIRL,2021-01-17,3587.571,2946.0,37.714,13.0\\r\\nIRL,2021-01-18,3186.286,2117.0,37.714,8.0\\r\\nIRL,2021-01-19,3035.429,1996.0,44.429,92.0\\r\\nIRL,2021-01-20,2882.857,2485.0,44.0,60.0\\r\\nIRL,2021-01-21,2695.0,2598.0,47.143,50.0\\r\\nIRL,2021-01-22,2533.0,2357.0,47.714,52.0\\r\\nIRL,2021-01-23,2343.429,1905.0,50.286,77.0\\r\\nIRL,2021-01-24,2118.286,1370.0,51.714,23.0\\r\\nIRL,2021-01-25,2011.429,1369.0,51.571,7.0\\r\\nIRL,2021-01-26,1858.857,928.0,51.143,89.0\\r\\nIRL,2021-01-27,1694.0,1331.0,50.286,54.0\\r\\nIRL,2021-01-28,1531.857,1463.0,49.857,47.0\\r\\nIRL,2021-01-29,1373.286,1247.0,49.143,47.0\\r\\nIRL,2021-01-30,1302.714,1411.0,49.286,78.0\\r\\nIRL,2021-01-31,1284.714,1244.0,48.143,15.0\\r\\nIRL,2021-02-01,1232.857,1006.0,48.571,10.0\\r\\nIRL,2021-02-02,1224.714,871.0,50.286,101.0\\r\\nIRL,2021-02-03,1178.286,1006.0,56.0,94.0\\r\\nIRL,2021-02-04,1157.0,1314.0,59.857,74.0\\r\\nIRL,2021-02-05,1124.429,1019.0,58.143,35.0\\r\\nIRL,2021-02-06,1035.0,785.0,54.571,53.0\\r\\nIRL,2021-02-07,1003.0,1020.0,54.143,12.0\\r\\nIRL,2021-02-08,977.714,829.0,52.857,1.0\\r\\nIRL,2021-02-09,930.857,543.0,47.714,65.0\\r\\nIRL,2021-02-10,929.857,999.0,40.286,42.0\\r\\nIRL,2021-02-11,865.286,862.0,37.143,52.0\\r\\nIRL,2021-02-12,851.0,919.0,34.857,19.0\\r\\nIRL,2021-02-13,892.571,1076.0,36.714,66.0\\r\\nIRL,2021-02-14,859.143,786.0,37.429,17.0\\r\\nIRL,2021-02-15,857.857,820.0,37.286,0.0\\r\\nIRL,2021-02-16,881.857,711.0,32.571,32.0\\r\\nIRL,2021-02-17,830.286,638.0,34.571,56.0\\r\\nIRL,2021-02-18,835.143,896.0,33.714,46.0\\r\\nIRL,2021-02-19,811.429,753.0,34.857,27.0\\r\\nIRL,2021-02-20,797.429,978.0,29.143,26.0\\r\\nIRL,2021-02-21,782.143,679.0,26.857,1.0\\r\\nIRL,2021-02-22,763.0,686.0,27.0,1.0\\r\\nIRL,2021-02-23,741.0,557.0,28.714,44.0\\r\\nIRL,2021-02-24,727.0,540.0,28.714,56.0\\r\\nIRL,2021-02-25,690.143,638.0,27.0,34.0\\r\\nIRL,2021-02-26,693.0,773.0,27.286,29.0\\r\\nIRL,2021-02-27,657.429,729.0,25.429,13.0\\r\\nIRL,2021-02-28,647.857,612.0,26.143,6.0\\r\\nIRL,2021-03-01,647.143,681.0,26.0,0.0\\r\\nIRL,2021-03-02,618.571,357.0,21.714,14.0\\r\\nIRL,2021-03-03,621.286,559.0,17.143,24.0\\r\\nIRL,2021-03-04,595.857,460.0,17.857,39.0\\r\\nIRL,2021-03-05,559.714,520.0,15.0,9.0\\r\\nIRL,2021-03-06,531.286,530.0,15.143,14.0\\r\\nIRL,2021-03-07,518.143,520.0,14.714,3.0\\r\\nIRL,2021-03-08,482.571,432.0,14.714,0.0\\r\\nIRL,2021-03-09,475.286,306.0,17.0,30.0\\r\\nIRL,2021-03-10,485.571,631.0,20.286,47.0\\r\\nIRL,2021-03-11,504.286,591.0,16.143,10.0\\r\\nIRL,2021-03-12,521.571,641.0,16.143,9.0\\r\\nIRL,2021-03-13,522.714,538.0,16.429,16.0\\r\\nIRL,2021-03-14,503.143,383.0,16.0,0.0\\r\\nIRL,2021-03-15,523.571,575.0,16.0,0.0\\r\\nIRL,2021-03-16,529.429,347.0,14.286,18.0\\r\\nIRL,2021-03-17,518.143,552.0,9.571,14.0\\r\\nIRL,2021-03-18,516.714,581.0,8.143,0.0\\r\\nIRL,2021-03-19,498.0,510.0,8.286,10.0\\r\\nIRL,2021-03-20,496.143,525.0,7.286,9.0\\r\\nIRL,2021-03-21,551.143,768.0,7.571,2.0\\r\\nIRL,2021-03-22,543.286,520.0,7.714,1.0\\r\\nIRL,2021-03-23,545.857,365.0,8.286,22.0\\r\\nIRL,2021-03-24,564.143,680.0,8.857,18.0\\r\\nIRL,2021-03-25,566.0,594.0,9.286,3.0\\r\\nIRL,2021-03-26,574.429,569.0,10.714,20.0\\r\\nIRL,2021-03-27,586.571,610.0,9.714,2.0\\r\\nIRL,2021-03-28,563.143,604.0,11.286,13.0\\r\\nIRL,2021-03-29,565.571,537.0,11.286,1.0\\r\\nIRL,2021-03-30,565.714,366.0,10.143,14.0\\r\\nIRL,2021-03-31,527.143,410.0,8.429,6.0\\r\\nIRL,2021-04-01,548.857,746.0,10.571,18.0\\r\\nIRL,2021-04-02,551.429,587.0,8.857,8.0\\r\\nIRL,2021-04-03,536.857,508.0,8.857,2.0\\r\\nIRL,2021-04-04,515.286,453.0,7.429,3.0\\r\\nIRL,2021-04-05,484.0,318.0,7.286,0.0\\r\\nIRL,2021-04-06,494.714,441.0,6.571,9.0\\r\\nIRL,2021-04-07,495.857,418.0,6.429,5.0\\r\\nIRL,2021-04-08,446.143,398.0,4.571,5.0\\r\\nIRL,2021-04-09,429.286,469.0,8.0,32.0\\r\\nIRL,2021-04-10,421.143,451.0,9.714,14.0\\r\\nIRL,2021-04-11,399.571,302.0,9.571,2.0\\r\\nIRL,2021-04-12,409.143,385.0,9.571,0.0\\r\\nIRL,2021-04-13,396.714,354.0,10.857,18.0\\r\\nIRL,2021-04-14,397.143,421.0,11.429,9.0\\r\\nIRL,2021-04-15,382.714,297.0,11.857,8.0\\r\\nIRL,2021-04-16,375.286,417.0,8.857,11.0\\r\\nIRL,2021-04-17,370.714,419.0,7.429,4.0\\r\\nIRL,2021-04-18,366.143,270.0,7.286,1.0\\r\\nIRL,2021-04-19,368.714,403.0,7.286,0.0\\r\\nIRL,2021-04-20,373.286,386.0,6.286,11.0\\r\\nIRL,2021-04-21,370.0,398.0,6.286,9.0\\r\\nIRL,2021-04-22,415.429,615.0,6.571,10.0\\r\\nIRL,2021-04-23,417.714,433.0,5.143,1.0\\r\\nIRL,2021-04-24,423.714,461.0,5.286,5.0\\r\\nIRL,2021-04-25,446.429,429.0,5.286,1.0\\r\\nIRL,2021-04-26,451.143,436.0,5.429,1.0\\r\\nIRL,2021-04-27,456.0,420.0,5.286,10.0\\r\\nIRL,2021-04-28,451.714,368.0,5.714,12.0\\r\\nIRL,2021-04-29,430.857,469.0,4.714,3.0\\r\\nIRL,2021-04-30,446.714,544.0,5.143,4.0\\r\\nIRL,2021-05-01,461.857,567.0,4.857,3.0\\r\\nIRL,2021-05-02,457.857,401.0,4.714,0.0\\r\\nIRL,2021-05-03,460.143,452.0,4.571,0.0\\r\\nIRL,2021-05-04,454.714,382.0,3.429,2.0\\r\\nIRL,2021-05-05,461.429,415.0,2.714,7.0\\r\\nIRL,2021-05-06,449.714,387.0,3.143,6.0\\r\\nIRL,2021-05-07,433.429,430.0,,\\r\\nIRL,2021-05-08,409.429,399.0,2.286,1.0\\r\\nIRL,2021-05-09,424.429,506.0,2.571,2.0\\r\\nIRL,2021-05-10,414.143,380.0,2.571,0.0\\r\\nIRL,2021-05-11,413.571,378.0,3.429,8.0\\r\\nIRL,2021-05-12,418.0,446.0,3.571,8.0\\r\\nIRL,2021-05-13,425.143,437.0,2.714,0.0\\r\\nIRL,2021-05-14,423.714,420.0,3.286,4.0\\r\\nIRL,2021-05-15,432.571,461.0,3.143,0.0\\r\\nIRL,2021-05-16,413.857,375.0,2.857,0.0\\r\\nIRL,2021-05-17,413.714,379.0,2.857,0.0\\r\\nIRL,2021-05-18,411.857,365.0,1.714,0.0\\r\\nIRL,2021-05-19,423.286,526.0,0.571,0.0\\r\\nIRL,2021-05-20,428.0,470.0,0.571,0.0\\r\\nIRL,2021-05-21,444.143,533.0,0.0,0.0\\r\\nIRL,2021-05-22,433.143,384.0,0.0,0.0\\r\\nIRL,2021-05-23,443.429,447.0,0.0,0.0\\r\\nIRL,2021-05-24,439.143,349.0,0.0,0.0\\r\\nIRL,2021-05-25,437.429,353.0,0.0,0.0\\r\\nIRL,2021-05-26,425.857,445.0,0.0,0.0\\r\\nIRL,2021-05-27,420.429,432.0,0.0,0.0\\r\\nIRL,2021-05-28,410.143,461.0,0.0,0.0\\r\\nIRL,2021-05-29,420.429,456.0,0.0,0.0\\r\\nIRL,2021-05-30,409.0,367.0,0.0,0.0\\r\\nIRL,2021-05-31,412.0,370.0,0.0,0.0\\r\\nIRL,2021-06-01,409.714,337.0,0.0,0.0\\r\\nIRL,2021-06-02,404.286,407.0,0.0,0.0\\r\\nIRL,2021-06-03,409.0,465.0,0.0,0.0\\r\\nIRL,2021-06-04,417.0,517.0,0.0,0.0\\r\\nIRL,2021-06-05,411.286,416.0,0.0,0.0\\r\\nIRL,2021-06-06,403.571,313.0,0.0,0.0\\r\\nIRL,2021-06-07,404.571,377.0,0.0,0.0\\r\\nIRL,2021-06-08,390.571,239.0,0.0,0.0\\r\\nIRL,2021-06-09,364.857,227.0,0.0,0.0\\r\\nIRL,2021-06-10,355.286,398.0,0.0,0.0\\r\\nIRL,2021-06-11,327.0,319.0,0.0,0.0\\r\\nIRL,2021-06-12,329.143,431.0,0.0,0.0\\r\\nIRL,2021-06-13,329.429,315.0,0.0,0.0\\r\\nIRL,2021-06-14,304.429,202.0,0.0,0.0\\r\\nIRL,2021-06-15,310.714,283.0,0.0,0.0\\r\\nIRL,2021-06-16,319.286,287.0,0.0,0.0\\r\\nIRL,2021-06-17,315.714,373.0,5.429,38.0\\r\\nIRL,2021-06-18,313.286,302.0,5.429,0.0\\r\\nIRL,2021-06-19,307.857,393.0,5.429,0.0\\r\\nIRL,2021-06-20,319.0,393.0,5.429,0.0\\r\\nIRL,2021-06-21,330.714,284.0,5.429,0.0\\r\\nIRL,2021-06-22,315.143,174.0,5.429,0.0\\r\\nIRL,2021-06-23,316.714,298.0,6.857,10.0\\r\\nIRL,2021-06-24,306.857,304.0,1.429,0.0\\r\\nIRL,2021-06-25,318.0,380.0,1.429,0.0\\r\\nIRL,2021-06-26,325.143,443.0,1.429,0.0\\r\\nIRL,2021-06-27,317.571,340.0,1.429,0.0\\r\\nIRL,2021-06-28,324.0,329.0,1.429,0.0\\r\\nIRL,2021-06-29,348.0,342.0,1.429,0.0\\r\\nIRL,2021-06-30,,,1.286,9.0\\r\\nIRL,2021-07-01,387.143,876.0,1.571,2.0\\r\\nIRL,2021-07-02,406.0,512.0,1.571,0.0\\r\\nIRL,2021-07-03,406.714,448.0,1.571,0.0\\r\\nIRL,2021-07-04,438.429,562.0,1.571,0.0\\r\\nIRL,2021-07-05,439.286,335.0,1.571,0.0\\r\\nIRL,2021-07-06,447.143,397.0,1.571,0.0\\r\\nIRL,2021-07-07,523.286,533.0,1.143,6.0\\r\\nIRL,2021-07-08,474.286,533.0,0.857,0.0\\r\\nIRL,2021-07-09,491.286,631.0,0.857,0.0\\r\\nIRL,2021-07-10,510.286,581.0,0.857,0.0\\r\\nIRL,2021-07-11,512.286,576.0,0.857,0.0\\r\\nIRL,2021-07-12,546.143,572.0,0.857,0.0\\r\\nIRL,2021-07-13,573.571,589.0,0.857,0.0\\r\\nIRL,2021-07-14,602.714,737.0,1.714,12.0\\r\\nIRL,2021-07-15,668.571,994.0,1.714,0.0\\r\\nIRL,2021-07-16,745.571,1170.0,1.714,0.0\\r\\nIRL,2021-07-17,859.286,1377.0,1.714,0.0\\r\\nIRL,2021-07-18,945.429,1179.0,1.714,0.0\\r\\nIRL,2021-07-19,1016.714,1071.0,1.714,0.0\\r\\nIRL,2021-07-20,1091.143,1110.0,1.714,0.0\\r\\nIRL,2021-07-21,1165.857,1260.0,1.143,8.0\\r\\nIRL,2021-07-22,1193.571,1188.0,1.143,0.0\\r\\nIRL,2021-07-23,1224.429,1386.0,1.143,0.0\\r\\nIRL,2021-07-24,1219.857,1345.0,1.143,0.0\\r\\nIRL,2021-07-25,1212.286,1126.0,1.143,0.0\\r\\nIRL,2021-07-26,1241.571,1276.0,1.143,0.0\\r\\nIRL,2021-07-27,1242.143,1114.0,1.143,0.0\\r\\nIRL,2021-07-28,1248.0,1301.0,1.286,9.0\\r\\nIRL,2021-07-29,1272.714,1361.0,1.286,0.0\\r\\nIRL,2021-07-30,1289.143,1501.0,1.286,0.0\\r\\nIRL,2021-07-31,1300.857,1427.0,1.286,0.0\\r\\nIRL,2021-08-01,1296.857,1098.0,1.286,0.0\\r\\nIRL,2021-08-02,1307.714,1352.0,1.286,0.0\\r\\nIRL,2021-08-03,1274.857,884.0,1.286,0.0\\r\\nIRL,2021-08-04,1262.857,1217.0,1.286,9.0\\r\\nIRL,2021-08-05,1281.571,1492.0,1.286,0.0\\r\\nIRL,2021-08-06,1321.571,1781.0,1.286,0.0\\r\\nIRL,2021-08-07,1378.857,1828.0,1.286,0.0\\r\\nIRL,2021-08-08,1484.429,1837.0,1.286,0.0\\r\\nIRL,2021-08-09,1492.857,1411.0,1.286,0.0\\r\\nIRL,2021-08-10,1582.143,1509.0,1.286,0.0\\r\\nIRL,2021-08-11,1668.143,1819.0,2.143,15.0\\r\\nIRL,2021-08-12,1702.571,1733.0,2.143,0.0\\r\\nIRL,2021-08-13,1730.714,1978.0,2.143,0.0\\r\\nIRL,2021-08-14,1765.857,2074.0,2.143,0.0\\r\\nIRL,2021-08-15,1754.571,1758.0,2.143,0.0\\r\\nIRL,2021-08-16,1758.857,1441.0,2.143,0.0\\r\\nIRL,2021-08-17,1757.0,1496.0,2.143,0.0\\r\\nIRL,2021-08-18,1740.571,1704.0,2.143,15.0\\r\\nIRL,2021-08-19,1752.714,1818.0,2.143,0.0\\r\\nIRL,2021-08-20,1769.857,2098.0,2.143,0.0\\r\\nIRL,2021-08-21,1777.143,2125.0,2.143,0.0\\r\\nIRL,2021-08-22,1767.143,1688.0,2.143,0.0\\r\\nIRL,2021-08-23,1788.429,1590.0,2.143,0.0\\r\\nIRL,2021-08-24,1799.143,1571.0,2.143,0.0\\r\\nIRL,2021-08-25,1848.714,2051.0,2.571,18.0\\r\\nIRL,2021-08-26,1855.571,1866.0,2.571,0.0\\r\\nIRL,2021-08-27,1823.714,1875.0,2.571,0.0\\r\\nIRL,2021-08-28,1805.429,1997.0,2.571,0.0\\r\\nIRL,2021-08-29,1808.0,1706.0,2.571,0.0\\r\\nIRL,2021-08-30,1765.429,1292.0,2.571,0.0\\r\\nIRL,2021-08-31,1738.429,1382.0,2.571,0.0\\r\\nIRL,2021-09-01,1701.0,1789.0,2.857,20.0\\r\\nIRL,2021-09-02,,,2.857,0.0\\r\\nIRL,2021-09-03,1367.571,1407.0,2.857,0.0\\r\\nIRL,2021-09-04,1325.571,1703.0,2.857,0.0\\r\\nIRL,2021-09-05,1250.429,1180.0,2.857,0.0\\r\\nIRL,2021-09-06,1228.143,1136.0,2.857,0.0\\r\\nIRL,2021-09-07,1240.0,1465.0,2.857,0.0\\r\\nIRL,2021-09-08,1204.0,1537.0,6.143,43.0\\r\\nIRL,2021-09-09,1385.571,1271.0,6.143,0.0\\r\\nIRL,2021-09-10,1415.857,1619.0,6.143,0.0\\r\\nIRL,2021-09-11,1382.0,1466.0,6.143,0.0\\r\\nIRL,2021-09-12,1405.714,1346.0,6.143,0.0\\r\\nIRL,2021-09-13,1368.714,877.0,6.143,0.0\\r\\nIRL,2021-09-14,1327.429,1176.0,6.143,0.0\\r\\nIRL,2021-09-15,,,3.429,24.0\\r\\nIRL,2021-09-16,1464.143,3765.0,3.429,0.0\\r\\nIRL,2021-09-17,1430.857,1386.0,3.429,0.0\\r\\nIRL,2021-09-18,1429.429,1456.0,3.429,0.0\\r\\nIRL,2021-09-19,1412.0,1224.0,3.429,0.0\\r\\nIRL,2021-09-20,1451.0,1150.0,3.429,0.0\\r\\nIRL,2021-09-21,1485.857,1420.0,3.429,0.0\\r\\nIRL,2021-09-22,1690.0,1429.0,4.286,30.0\\r\\nIRL,2021-09-23,1345.571,1354.0,4.286,0.0\\r\\nIRL,2021-09-24,1313.714,1163.0,4.286,0.0\\r\\nIRL,2021-09-25,1296.429,1335.0,4.286,0.0\\r\\nIRL,2021-09-26,1330.0,1459.0,4.286,0.0\\r\\nIRL,2021-09-27,1314.857,1044.0,4.286,0.0\\r\\nIRL,2021-09-28,1325.857,1497.0,4.286,0.0\\r\\nIRL,2021-09-29,1328.429,1447.0,5.714,40.0\\r\\nIRL,2021-09-30,1316.0,1267.0,5.714,0.0\\r\\nIRL,2021-10-01,1300.857,1057.0,5.714,0.0\\r\\nIRL,2021-10-02,1336.714,1586.0,5.714,0.0\\r\\nIRL,2021-10-03,1278.429,1051.0,5.714,0.0\\r\\nIRL,2021-10-04,1256.857,893.0,5.714,0.0\\r\\nIRL,2021-10-05,1203.571,1124.0,5.714,0.0\\r\\nIRL,2021-10-06,1137.143,982.0,4.429,31.0\\r\\nIRL,2021-10-07,1128.429,1206.0,4.429,0.0\\r\\nIRL,2021-10-08,1263.429,2002.0,4.429,0.0\\r\\nIRL,2021-10-09,1314.0,1940.0,4.429,0.0\\r\\nIRL,2021-10-10,1361.571,1384.0,4.429,0.0\\r\\nIRL,2021-10-11,1427.857,1357.0,4.429,0.0\\r\\nIRL,2021-10-12,1475.286,1456.0,4.429,0.0\\r\\nIRL,2021-10-13,1628.0,2051.0,3.714,26.0\\r\\nIRL,2021-10-14,1688.0,1626.0,3.714,0.0\\r\\nIRL,2021-10-15,1674.429,1907.0,3.714,0.0\\r\\nIRL,2021-10-16,1708.714,2180.0,3.714,0.0\\r\\nIRL,2021-10-17,1708.143,1380.0,3.714,0.0\\r\\nIRL,2021-10-18,1739.429,1576.0,3.714,0.0\\r\\nIRL,2021-10-19,1873.857,2397.0,3.714,0.0\\r\\nIRL,2021-10-20,1887.571,2147.0,9.0,63.0\\r\\nIRL,2021-10-21,1944.714,2026.0,9.0,0.0\\r\\nIRL,2021-10-22,2024.429,2465.0,9.0,0.0\\r\\nIRL,2021-10-23,2059.714,2427.0,9.0,0.0\\r\\nIRL,2021-10-24,2109.0,1725.0,9.0,0.0\\r\\nIRL,2021-10-25,2147.429,1845.0,9.0,0.0\\r\\nIRL,2021-10-26,2116.429,2180.0,9.0,0.0\\r\\nIRL,2021-10-27,2041.714,1624.0,9.571,67.0\\r\\nIRL,2021-10-28,2123.429,2598.0,9.571,0.0\\r\\nIRL,2021-10-29,2134.286,2541.0,9.571,0.0\\r\\nIRL,2021-10-30,2211.286,2966.0,9.571,0.0\\r\\nIRL,2021-10-31,2245.286,1963.0,9.571,0.0\\r\\nIRL,2021-11-01,2389.571,2855.0,9.571,0.0\\r\\nIRL,2021-11-02,2610.0,3723.0,9.571,0.0\\r\\nIRL,2021-11-03,2831.429,3174.0,8.0,56.0\\r\\nIRL,2021-11-04,2892.286,3024.0,8.0,0.0\\r\\nIRL,2021-11-05,3086.857,3903.0,8.0,0.0\\r\\nIRL,2021-11-06,3189.571,3685.0,8.0,0.0\\r\\nIRL,2021-11-07,3398.857,3428.0,8.0,0.0\\r\\nIRL,2021-11-08,3442.571,3161.0,8.0,0.0\\r\\nIRL,2021-11-09,3672.286,5331.0,8.0,0.0\\r\\nIRL,2021-11-10,3642.857,2968.0,10.571,74.0\\r\\nIRL,2021-11-11,3736.143,3677.0,10.571,0.0\\r\\nIRL,2021-11-12,3961.143,5478.0,10.571,0.0\\r\\nIRL,2021-11-13,4097.857,4642.0,10.571,0.0\\r\\nIRL,2021-11-14,4151.714,3805.0,10.571,0.0\\r\\nIRL,2021-11-15,4351.286,4558.0,10.571,0.0\\r\\nIRL,2021-11-16,4219.286,4407.0,10.571,0.0\\r\\nIRL,2021-11-17,4314.143,3632.0,6.143,43.0\\r\\nIRL,2021-11-18,4452.571,4646.0,6.143,0.0\\r\\nIRL,2021-11-19,4117.571,3133.0,6.143,0.0\\r\\nIRL,2021-11-20,4305.714,5959.0,6.143,0.0\\r\\nIRL,2021-11-21,4359.429,4181.0,6.143,0.0\\r\\nIRL,2021-11-22,4512.571,5630.0,6.143,0.0\\r\\nIRL,2021-11-23,4406.0,3661.0,6.143,0.0\\r\\nIRL,2021-11-24,4443.0,3891.0,6.143,43.0\\r\\nIRL,2021-11-25,4459.714,4763.0,6.143,0.0\\r\\nIRL,2021-11-26,4672.0,4619.0,6.143,0.0\\r\\nIRL,2021-11-27,4505.143,4791.0,6.143,0.0\\r\\nIRL,2021-11-28,4441.429,3735.0,6.143,0.0\\r\\nIRL,2021-11-29,4294.714,4603.0,6.143,0.0\\r\\nIRL,2021-11-30,4551.429,5458.0,6.143,0.0\\r\\nIRL,2021-12-01,4537.0,3790.0,7.857,55.0\\r\\nIRL,2021-12-02,4450.714,4159.0,7.857,0.0\\r\\nIRL,2021-12-03,4563.429,5408.0,7.857,0.0\\r\\nIRL,2021-12-04,4682.143,5622.0,7.857,0.0\\r\\nIRL,2021-12-05,4885.143,5156.0,7.857,0.0\\r\\nIRL,2021-12-06,4643.429,2911.0,7.857,0.0\\r\\nIRL,2021-12-07,4658.714,5565.0,7.857,0.0\\r\\nIRL,2021-12-08,4706.714,4126.0,11.571,81.0\\r\\nIRL,2021-12-09,4684.429,4003.0,11.571,0.0\\r\\nIRL,2021-12-10,4497.143,4097.0,11.571,0.0\\r\\nIRL,2021-12-11,4266.0,4004.0,11.571,0.0\\r\\nIRL,2021-12-12,4196.143,4667.0,11.571,0.0\\r\\nIRL,2021-12-13,4449.286,4683.0,11.571,0.0\\r\\nIRL,2021-12-14,4207.286,3871.0,11.571,0.0\\r\\nIRL,2021-12-15,4222.143,4230.0,6.714,47.0\\r\\nIRL,2021-12-16,4241.857,4141.0,6.714,0.0\\r\\nIRL,2021-12-17,4170.143,3595.0,6.714,0.0\\r\\nIRL,2021-12-18,4645.714,7333.0,6.714,0.0\\r\\nIRL,2021-12-19,4711.0,5124.0,6.714,0.0\\r\\nIRL,2021-12-20,4726.0,4788.0,6.714,0.0\\r\\nIRL,2021-12-21,4925.714,5269.0,6.714,0.0\\r\\nIRL,2021-12-22,5222.429,6307.0,7.857,55.0\\r\\nIRL,2021-12-23,5689.571,7411.0,7.857,0.0\\r\\nIRL,2021-12-24,6773.429,11182.0,7.857,0.0\\r\\nIRL,2021-12-25,7692.286,13765.0,7.857,0.0\\r\\nIRL,2021-12-26,8446.571,10404.0,7.857,0.0\\r\\nIRL,2021-12-27,8724.714,6735.0,7.857,0.0\\r\\nIRL,2021-12-28,9258.571,9006.0,7.857,0.0\\r\\nIRL,2021-12-29,10704.429,16428.0,3.143,22.0\\r\\nIRL,2021-12-30,12582.0,20554.0,3.143,0.0\\r\\nIRL,2021-12-31,13857.429,20110.0,3.143,0.0\\r\\nIRL,2022-01-01,15216.857,23281.0,3.143,0.0\\r\\nIRL,2022-01-02,13730.571,0.0,3.143,0.0\\r\\nIRL,2022-01-03,17633.714,34057.0,3.143,0.0\\r\\nIRL,2022-01-04,19390.286,21302.0,3.143,0.0\\r\\nIRL,2022-01-05,19565.714,17656.0,5.714,40.0\\r\\nIRL,2022-01-06,20031.857,23817.0,5.714,0.0\\r\\nIRL,2022-01-07,20291.286,21926.0,5.714,0.0\\r\\nIRL,2022-01-08,20697.143,26122.0,5.714,0.0\\r\\nIRL,2022-01-09,23752.0,21384.0,5.714,0.0\\r\\nIRL,2022-01-10,18886.714,0.0,5.714,0.0\\r\\nIRL,2022-01-11,22014.857,43199.0,5.714,0.0\\r\\nIRL,2022-01-12,22479.571,20909.0,11.857,83.0\\r\\nIRL,2022-01-13,21777.714,18904.0,11.857,0.0\\r\\nIRL,2022-01-14,21083.286,17065.0,11.857,0.0\\r\\nIRL,2022-01-15,19430.857,14555.0,11.857,0.0\\r\\nIRL,2022-01-16,17912.143,10753.0,11.857,0.0\\r\\nIRL,2022-01-17,18816.286,6329.0,11.857,0.0\\r\\nIRL,2022-01-18,13468.857,5767.0,11.857,0.0\\r\\nIRL,2022-01-19,11459.429,6843.0,7.429,52.0\\r\\nIRL,2022-01-20,9547.857,5523.0,7.429,0.0\\r\\nIRL,2022-01-21,8052.429,6597.0,7.429,0.0\\r\\nIRL,2022-01-22,6928.714,6689.0,7.429,0.0\\r\\nIRL,2022-01-23,6068.429,4731.0,7.429,0.0\\r\\nIRL,2022-01-24,5691.714,3692.0,7.429,0.0\\r\\nIRL,2022-01-25,5440.143,4006.0,7.429,0.0\\r\\nIRL,2022-01-26,5263.286,5605.0,7.0,49.0\\r\\nIRL,2022-01-27,5226.429,5265.0,7.0,0.0\\r\\nIRL,2022-01-28,5013.857,5109.0,7.0,0.0\\r\\nIRL,2022-01-29,4058.286,0.0,7.0,0.0\\r\\nIRL,2022-01-30,3382.429,0.0,7.0,0.0\\r\\nIRL,2022-01-31,4764.0,13363.0,7.0,0.0\\r\\nIRL,2022-02-01,4792.857,4208.0,7.0,0.0\\r\\nIRL,2022-02-02,4840.714,5940.0,13.143,92.0\\r\\nIRL,2022-02-03,4954.429,6061.0,13.143,0.0\\r\\nIRL,2022-02-04,5181.286,6697.0,13.143,0.0\\r\\nIRL,2022-02-05,5181.286,0.0,13.143,0.0\\r\\nIRL,2022-02-06,5181.286,0.0,13.143,0.0\\r\\nIRL,2022-02-07,5439.143,15168.0,13.143,0.0\\r\\nIRL,2022-02-08,5378.0,3780.0,13.143,0.0\\r\\nIRL,2022-02-09,5340.429,5677.0,9.0,63.0\\r\\nIRL,2022-02-10,5281.571,5649.0,9.0,0.0\\r\\nIRL,2022-02-11,5270.286,6618.0,9.0,0.0\\r\\nIRL,2022-02-12,5270.286,0.0,9.0,0.0\\r\\nIRL,2022-02-13,5270.286,0.0,9.0,0.0\\r\\nIRL,2022-02-14,4927.0,12765.0,9.0,0.0\\r\\nIRL,2022-02-15,,,23.143,99.0\\r\\nIRL,2022-02-16,4328.0,5264.0,15.429,9.0\\r\\nIRL,2022-02-17,4239.0,5026.0,15.857,3.0\\r\\nIRL,2022-02-18,3978.571,4795.0,18.0,15.0\\r\\nIRL,2022-02-19,3978.571,0.0,18.0,0.0\\r\\nIRL,2022-02-20,3978.571,0.0,18.0,0.0\\r\\nIRL,2022-02-21,3819.857,11654.0,21.714,26.0\\r\\nIRL,2022-02-22,4288.429,3280.0,8.857,9.0\\r\\nIRL,2022-02-23,4125.143,4121.0,8.714,8.0\\r\\nIRL,2022-02-24,3939.857,3729.0,9.857,11.0\\r\\nIRL,2022-02-25,3869.714,4304.0,8.286,4.0\\r\\nIRL,2022-02-26,3869.714,0.0,8.286,0.0\\r\\nIRL,2022-02-27,3869.714,0.0,8.286,0.0\\r\\nIRL,2022-02-28,3377.714,8210.0,7.714,22.0\\r\\nIRL,2022-03-01,3380.286,3298.0,8.0,11.0\\r\\nIRL,2022-03-02,3269.0,3342.0,8.714,13.0\\r\\nIRL,2022-03-03,3313.857,4043.0,8.0,6.0\\r\\nIRL,2022-03-04,3269.714,3995.0,8.0,4.0\\r\\nIRL,2022-03-05,3269.714,0.0,8.0,0.0\\r\\nIRL,2022-03-06,3269.714,0.0,8.0,0.0\\r\\nIRL,2022-03-07,3167.0,7491.0,10.429,39.0\\r\\nIRL,2022-03-08,3318.0,4355.0,9.0,1.0\\r\\nIRL,2022-03-09,3083.143,1698.0,8.143,7.0\\r\\nIRL,2022-03-10,3085.143,4057.0,9.0,12.0\\r\\nIRL,2022-03-11,3818.0,9125.0,11.429,21.0\\r\\nIRL,2022-03-12,3818.0,0.0,11.429,0.0\\r\\nIRL,2022-03-13,3818.0,0.0,11.429,0.0\\r\\nIRL,2022-03-14,4448.857,11907.0,7.714,13.0\\r\\nIRL,2022-03-15,4724.143,6282.0,9.286,12.0\\r\\nIRL,2022-03-16,5260.429,5452.0,8.571,2.0\\r\\nIRL,2022-03-17,4680.857,0.0,6.857,0.0\\r\\nIRL,2022-03-18,3377.286,0.0,3.857,0.0\\r\\nIRL,2022-03-19,3377.286,0.0,3.857,0.0\\r\\nIRL,2022-03-20,3377.286,0.0,3.857,0.0\\r\\nIRL,2022-03-21,5206.286,24710.0,5.714,26.0\\r\\nIRL,2022-03-22,5410.0,7708.0,6.286,16.0\\r\\nIRL,2022-03-23,5637.429,7044.0,6.714,5.0\\r\\nIRL,2022-03-24,6904.429,8869.0,7.857,8.0\\r\\nIRL,2022-03-25,8211.143,9147.0,10.286,17.0\\r\\nIRL,2022-03-26,8211.143,0.0,10.286,0.0\\r\\nIRL,2022-03-27,8211.143,0.0,10.286,0.0\\r\\nIRL,2022-03-28,7528.571,19932.0,8.143,11.0\\r\\nIRL,2022-03-29,7275.286,5935.0,7.143,9.0\\r\\nIRL,2022-03-30,7036.143,5370.0,7.857,10.0\\r\\nIRL,2022-03-31,6518.143,5243.0,8.571,13.0\\r\\nIRL,2022-04-01,6029.286,5725.0,10.857,33.0\\r\\nIRL,2022-04-02,6029.286,0.0,10.857,0.0\\r\\nIRL,2022-04-03,6029.286,0.0,10.857,0.0\\r\\nIRL,2022-04-04,4499.571,9224.0,11.143,13.0\\r\\nIRL,2022-04-05,4042.857,2738.0,10.714,6.0\\r\\nIRL,2022-04-06,3855.571,4059.0,12.0,19.0\\r\\nIRL,2022-04-07,3556.571,3150.0,12.857,19.0\\r\\nIRL,2022-04-08,3144.857,2843.0,11.0,20.0\\r\\nIRL,2022-04-09,3144.857,0.0,11.0,0.0\\r\\nIRL,2022-04-10,3144.857,0.0,11.0,0.0\\r\\nIRL,2022-04-11,2670.286,5902.0,12.143,21.0\\r\\nIRL,2022-04-12,2528.857,1748.0,14.0,19.0\\r\\nIRL,2022-04-13,2248.429,2096.0,13.571,16.0\\r\\nIRL,2022-04-14,2073.286,1924.0,12.714,13.0\\r\\nIRL,2022-04-15,1667.143,0.0,9.857,0.0\\r\\nIRL,2022-04-16,1667.143,0.0,9.857,0.0\\r\\nIRL,2022-04-17,1667.143,0.0,9.857,0.0\\r\\nIRL,2022-04-18,824.0,0.0,6.857,0.0\\r\\nIRL,2022-04-19,1536.286,6734.0,8.714,32.0\\r\\nIRL,2022-04-20,1436.143,1395.0,8.857,17.0\\r\\nIRL,2022-04-21,1362.714,1410.0,8.714,12.0\\r\\nIRL,2022-04-22,1528.857,1163.0,9.143,3.0\\r\\nIRL,2022-04-23,1528.857,0.0,9.143,0.0\\r\\nIRL,2022-04-24,1528.857,0.0,9.143,0.0\\r\\nIRL,2022-04-25,1996.857,3276.0,12.0,20.0\\r\\nIRL,2022-04-26,1209.571,1223.0,9.143,12.0\\r\\nIRL,2022-04-27,1148.857,970.0,10.429,26.0\\r\\nIRL,2022-04-28,1111.429,1148.0,11.857,22.0\\r\\nIRL,2022-04-29,1082.286,959.0,13.0,11.0\\r\\nIRL,2022-04-30,1082.286,0.0,13.0,0.0\\r\\nIRL,2022-05-01,1082.286,0.0,13.0,0.0\\r\\nIRL,2022-05-02,614.286,0.0,10.143,0.0\\r\\nIRL,2022-05-03,751.571,2184.0,9.143,5.0\\r\\nIRL,2022-05-04,760.286,1031.0,7.0,11.0\\r\\nIRL,2022-05-05,760.143,1147.0,4.571,5.0\\r\\nIRL,2022-05-06,750.143,889.0,6.286,23.0\\r\\nIRL,2022-05-07,750.143,0.0,6.286,0.0\\r\\nIRL,2022-05-08,750.143,0.0,6.286,0.0\\r\\nIRL,2022-05-09,1063.286,2192.0,10.857,32.0\\r\\nIRL,2022-05-10,1147.429,2773.0,10.714,4.0\\r\\nIRL,2022-05-11,1328.571,2299.0,9.571,3.0\\r\\nIRL,2022-05-12,1613.857,3144.0,9.714,6.0\\r\\nIRL,2022-05-13,1869.714,2680.0,10.286,27.0\\r\\nIRL,2022-05-14,1869.714,0.0,10.286,0.0\\r\\nIRL,2022-05-15,1869.714,0.0,10.286,0.0\\r\\nIRL,2022-05-16,1556.571,0.0,5.714,0.0\\r\\nIRL,2022-05-17,1160.429,0.0,5.143,0.0\\r\\nIRL,2022-05-18,3172.571,16384.0,10.571,41.0\\r\\nIRL,2022-05-19,2723.429,0.0,9.714,0.0\\r\\nIRL,2022-05-20,2340.571,0.0,5.857,0.0\\r\\nIRL,2022-05-21,2340.571,0.0,5.857,0.0\\r\\nIRL,2022-05-22,2340.571,0.0,5.857,0.0\\r\\nIRL,2022-05-23,2340.571,0.0,5.857,0.0\\r\\nIRL,2022-05-24,2340.571,0.0,5.857,0.0\\r\\nIRL,2022-05-25,1399.571,9797.0,8.571,60.0\\r\\nIRL,2022-05-26,,,,\\r\\nIRL,2022-05-27,,,,\\r\\n\";","var EOL = {},\n    EOF = {},\n    QUOTE = 34,\n    NEWLINE = 10,\n    RETURN = 13;\n\nfunction objectConverter(columns) {\n  return new Function(\"d\", \"return {\" + columns.map(function(name, i) {\n    return JSON.stringify(name) + \": d[\" + i + \"] || \\\"\\\"\";\n  }).join(\",\") + \"}\");\n}\n\nfunction customConverter(columns, f) {\n  var object = objectConverter(columns);\n  return function(row, i) {\n    return f(object(row), i, columns);\n  };\n}\n\n// Compute unique columns in order of discovery.\nfunction inferColumns(rows) {\n  var columnSet = Object.create(null),\n      columns = [];\n\n  rows.forEach(function(row) {\n    for (var column in row) {\n      if (!(column in columnSet)) {\n        columns.push(columnSet[column] = column);\n      }\n    }\n  });\n\n  return columns;\n}\n\nfunction pad(value, width) {\n  var s = value + \"\", length = s.length;\n  return length < width ? new Array(width - length + 1).join(0) + s : s;\n}\n\nfunction formatYear(year) {\n  return year < 0 ? \"-\" + pad(-year, 6)\n    : year > 9999 ? \"+\" + pad(year, 6)\n    : pad(year, 4);\n}\n\nfunction formatDate(date) {\n  var hours = date.getUTCHours(),\n      minutes = date.getUTCMinutes(),\n      seconds = date.getUTCSeconds(),\n      milliseconds = date.getUTCMilliseconds();\n  return isNaN(date) ? \"Invalid Date\"\n      : formatYear(date.getUTCFullYear(), 4) + \"-\" + pad(date.getUTCMonth() + 1, 2) + \"-\" + pad(date.getUTCDate(), 2)\n      + (milliseconds ? \"T\" + pad(hours, 2) + \":\" + pad(minutes, 2) + \":\" + pad(seconds, 2) + \".\" + pad(milliseconds, 3) + \"Z\"\n      : seconds ? \"T\" + pad(hours, 2) + \":\" + pad(minutes, 2) + \":\" + pad(seconds, 2) + \"Z\"\n      : minutes || hours ? \"T\" + pad(hours, 2) + \":\" + pad(minutes, 2) + \"Z\"\n      : \"\");\n}\n\nexport default function(delimiter) {\n  var reFormat = new RegExp(\"[\\\"\" + delimiter + \"\\n\\r]\"),\n      DELIMITER = delimiter.charCodeAt(0);\n\n  function parse(text, f) {\n    var convert, columns, rows = parseRows(text, function(row, i) {\n      if (convert) return convert(row, i - 1);\n      columns = row, convert = f ? customConverter(row, f) : objectConverter(row);\n    });\n    rows.columns = columns || [];\n    return rows;\n  }\n\n  function parseRows(text, f) {\n    var rows = [], // output rows\n        N = text.length,\n        I = 0, // current character index\n        n = 0, // current line number\n        t, // current token\n        eof = N <= 0, // current token followed by EOF?\n        eol = false; // current token followed by EOL?\n\n    // Strip the trailing newline.\n    if (text.charCodeAt(N - 1) === NEWLINE) --N;\n    if (text.charCodeAt(N - 1) === RETURN) --N;\n\n    function token() {\n      if (eof) return EOF;\n      if (eol) return eol = false, EOL;\n\n      // Unescape quotes.\n      var i, j = I, c;\n      if (text.charCodeAt(j) === QUOTE) {\n        while (I++ < N && text.charCodeAt(I) !== QUOTE || text.charCodeAt(++I) === QUOTE);\n        if ((i = I) >= N) eof = true;\n        else if ((c = text.charCodeAt(I++)) === NEWLINE) eol = true;\n        else if (c === RETURN) { eol = true; if (text.charCodeAt(I) === NEWLINE) ++I; }\n        return text.slice(j + 1, i - 1).replace(/\"\"/g, \"\\\"\");\n      }\n\n      // Find next delimiter or newline.\n      while (I < N) {\n        if ((c = text.charCodeAt(i = I++)) === NEWLINE) eol = true;\n        else if (c === RETURN) { eol = true; if (text.charCodeAt(I) === NEWLINE) ++I; }\n        else if (c !== DELIMITER) continue;\n        return text.slice(j, i);\n      }\n\n      // Return last token before EOF.\n      return eof = true, text.slice(j, N);\n    }\n\n    while ((t = token()) !== EOF) {\n      var row = [];\n      while (t !== EOL && t !== EOF) row.push(t), t = token();\n      if (f && (row = f(row, n++)) == null) continue;\n      rows.push(row);\n    }\n\n    return rows;\n  }\n\n  function preformatBody(rows, columns) {\n    return rows.map(function(row) {\n      return columns.map(function(column) {\n        return formatValue(row[column]);\n      }).join(delimiter);\n    });\n  }\n\n  function format(rows, columns) {\n    if (columns == null) columns = inferColumns(rows);\n    return [columns.map(formatValue).join(delimiter)].concat(preformatBody(rows, columns)).join(\"\\n\");\n  }\n\n  function formatBody(rows, columns) {\n    if (columns == null) columns = inferColumns(rows);\n    return preformatBody(rows, columns).join(\"\\n\");\n  }\n\n  function formatRows(rows) {\n    return rows.map(formatRow).join(\"\\n\");\n  }\n\n  function formatRow(row) {\n    return row.map(formatValue).join(delimiter);\n  }\n\n  function formatValue(value) {\n    return value == null ? \"\"\n        : value instanceof Date ? formatDate(value)\n        : reFormat.test(value += \"\") ? \"\\\"\" + value.replace(/\"/g, \"\\\"\\\"\") + \"\\\"\"\n        : value;\n  }\n\n  return {\n    parse: parse,\n    parseRows: parseRows,\n    format: format,\n    formatBody: formatBody,\n    formatRows: formatRows,\n    formatRow: formatRow,\n    formatValue: formatValue\n  };\n}\n","import formatDistance from \"./_lib/formatDistance/index.js\";\nimport formatLong from \"./_lib/formatLong/index.js\";\nimport formatRelative from \"./_lib/formatRelative/index.js\";\nimport localize from \"./_lib/localize/index.js\";\nimport match from \"./_lib/match/index.js\";\n\n/**\n * @type {Locale}\n * @category Locales\n * @summary English locale (United States).\n * @language English\n * @iso-639-2 eng\n * @author Sasha Koss [@kossnocorp]{@link https://github.com/kossnocorp}\n * @author Lesha Koss [@leshakoss]{@link https://github.com/leshakoss}\n */\nvar locale = {\n  code: 'en-US',\n  formatDistance: formatDistance,\n  formatLong: formatLong,\n  formatRelative: formatRelative,\n  localize: localize,\n  match: match,\n  options: {\n    weekStartsOn: 0\n    /* Sunday */\n    ,\n    firstWeekContainsDate: 1\n  }\n};\nexport default locale;","var formatDistanceLocale = {\n  lessThanXSeconds: {\n    one: 'less than a second',\n    other: 'less than {{count}} seconds'\n  },\n  xSeconds: {\n    one: '1 second',\n    other: '{{count}} seconds'\n  },\n  halfAMinute: 'half a minute',\n  lessThanXMinutes: {\n    one: 'less than a minute',\n    other: 'less than {{count}} minutes'\n  },\n  xMinutes: {\n    one: '1 minute',\n    other: '{{count}} minutes'\n  },\n  aboutXHours: {\n    one: 'about 1 hour',\n    other: 'about {{count}} hours'\n  },\n  xHours: {\n    one: '1 hour',\n    other: '{{count}} hours'\n  },\n  xDays: {\n    one: '1 day',\n    other: '{{count}} days'\n  },\n  aboutXWeeks: {\n    one: 'about 1 week',\n    other: 'about {{count}} weeks'\n  },\n  xWeeks: {\n    one: '1 week',\n    other: '{{count}} weeks'\n  },\n  aboutXMonths: {\n    one: 'about 1 month',\n    other: 'about {{count}} months'\n  },\n  xMonths: {\n    one: '1 month',\n    other: '{{count}} months'\n  },\n  aboutXYears: {\n    one: 'about 1 year',\n    other: 'about {{count}} years'\n  },\n  xYears: {\n    one: '1 year',\n    other: '{{count}} years'\n  },\n  overXYears: {\n    one: 'over 1 year',\n    other: 'over {{count}} years'\n  },\n  almostXYears: {\n    one: 'almost 1 year',\n    other: 'almost {{count}} years'\n  }\n};\n\nvar formatDistance = function (token, count, options) {\n  var result;\n  var tokenValue = formatDistanceLocale[token];\n\n  if (typeof tokenValue === 'string') {\n    result = tokenValue;\n  } else if (count === 1) {\n    result = tokenValue.one;\n  } else {\n    result = tokenValue.other.replace('{{count}}', count.toString());\n  }\n\n  if (options !== null && options !== void 0 && options.addSuffix) {\n    if (options.comparison && options.comparison > 0) {\n      return 'in ' + result;\n    } else {\n      return result + ' ago';\n    }\n  }\n\n  return result;\n};\n\nexport default formatDistance;","import buildFormatLongFn from \"../../../_lib/buildFormatLongFn/index.js\";\nvar dateFormats = {\n  full: 'EEEE, MMMM do, y',\n  long: 'MMMM do, y',\n  medium: 'MMM d, y',\n  short: 'MM/dd/yyyy'\n};\nvar timeFormats = {\n  full: 'h:mm:ss a zzzz',\n  long: 'h:mm:ss a z',\n  medium: 'h:mm:ss a',\n  short: 'h:mm a'\n};\nvar dateTimeFormats = {\n  full: \"{{date}} 'at' {{time}}\",\n  long: \"{{date}} 'at' {{time}}\",\n  medium: '{{date}}, {{time}}',\n  short: '{{date}}, {{time}}'\n};\nvar formatLong = {\n  date: buildFormatLongFn({\n    formats: dateFormats,\n    defaultWidth: 'full'\n  }),\n  time: buildFormatLongFn({\n    formats: timeFormats,\n    defaultWidth: 'full'\n  }),\n  dateTime: buildFormatLongFn({\n    formats: dateTimeFormats,\n    defaultWidth: 'full'\n  })\n};\nexport default formatLong;","var formatRelativeLocale = {\n  lastWeek: \"'last' eeee 'at' p\",\n  yesterday: \"'yesterday at' p\",\n  today: \"'today at' p\",\n  tomorrow: \"'tomorrow at' p\",\n  nextWeek: \"eeee 'at' p\",\n  other: 'P'\n};\n\nvar formatRelative = function (token, _date, _baseDate, _options) {\n  return formatRelativeLocale[token];\n};\n\nexport default formatRelative;","import buildLocalizeFn from \"../../../_lib/buildLocalizeFn/index.js\";\nvar eraValues = {\n  narrow: ['B', 'A'],\n  abbreviated: ['BC', 'AD'],\n  wide: ['Before Christ', 'Anno Domini']\n};\nvar quarterValues = {\n  narrow: ['1', '2', '3', '4'],\n  abbreviated: ['Q1', 'Q2', 'Q3', 'Q4'],\n  wide: ['1st quarter', '2nd quarter', '3rd quarter', '4th quarter']\n}; // Note: in English, the names of days of the week and months are capitalized.\n// If you are making a new locale based on this one, check if the same is true for the language you're working on.\n// Generally, formatted dates should look like they are in the middle of a sentence,\n// e.g. in Spanish language the weekdays and months should be in the lowercase.\n\nvar monthValues = {\n  narrow: ['J', 'F', 'M', 'A', 'M', 'J', 'J', 'A', 'S', 'O', 'N', 'D'],\n  abbreviated: ['Jan', 'Feb', 'Mar', 'Apr', 'May', 'Jun', 'Jul', 'Aug', 'Sep', 'Oct', 'Nov', 'Dec'],\n  wide: ['January', 'February', 'March', 'April', 'May', 'June', 'July', 'August', 'September', 'October', 'November', 'December']\n};\nvar dayValues = {\n  narrow: ['S', 'M', 'T', 'W', 'T', 'F', 'S'],\n  short: ['Su', 'Mo', 'Tu', 'We', 'Th', 'Fr', 'Sa'],\n  abbreviated: ['Sun', 'Mon', 'Tue', 'Wed', 'Thu', 'Fri', 'Sat'],\n  wide: ['Sunday', 'Monday', 'Tuesday', 'Wednesday', 'Thursday', 'Friday', 'Saturday']\n};\nvar dayPeriodValues = {\n  narrow: {\n    am: 'a',\n    pm: 'p',\n    midnight: 'mi',\n    noon: 'n',\n    morning: 'morning',\n    afternoon: 'afternoon',\n    evening: 'evening',\n    night: 'night'\n  },\n  abbreviated: {\n    am: 'AM',\n    pm: 'PM',\n    midnight: 'midnight',\n    noon: 'noon',\n    morning: 'morning',\n    afternoon: 'afternoon',\n    evening: 'evening',\n    night: 'night'\n  },\n  wide: {\n    am: 'a.m.',\n    pm: 'p.m.',\n    midnight: 'midnight',\n    noon: 'noon',\n    morning: 'morning',\n    afternoon: 'afternoon',\n    evening: 'evening',\n    night: 'night'\n  }\n};\nvar formattingDayPeriodValues = {\n  narrow: {\n    am: 'a',\n    pm: 'p',\n    midnight: 'mi',\n    noon: 'n',\n    morning: 'in the morning',\n    afternoon: 'in the afternoon',\n    evening: 'in the evening',\n    night: 'at night'\n  },\n  abbreviated: {\n    am: 'AM',\n    pm: 'PM',\n    midnight: 'midnight',\n    noon: 'noon',\n    morning: 'in the morning',\n    afternoon: 'in the afternoon',\n    evening: 'in the evening',\n    night: 'at night'\n  },\n  wide: {\n    am: 'a.m.',\n    pm: 'p.m.',\n    midnight: 'midnight',\n    noon: 'noon',\n    morning: 'in the morning',\n    afternoon: 'in the afternoon',\n    evening: 'in the evening',\n    night: 'at night'\n  }\n};\n\nvar ordinalNumber = function (dirtyNumber, _options) {\n  var number = Number(dirtyNumber); // If ordinal numbers depend on context, for example,\n  // if they are different for different grammatical genders,\n  // use `options.unit`.\n  //\n  // `unit` can be 'year', 'quarter', 'month', 'week', 'date', 'dayOfYear',\n  // 'day', 'hour', 'minute', 'second'.\n\n  var rem100 = number % 100;\n\n  if (rem100 > 20 || rem100 < 10) {\n    switch (rem100 % 10) {\n      case 1:\n        return number + 'st';\n\n      case 2:\n        return number + 'nd';\n\n      case 3:\n        return number + 'rd';\n    }\n  }\n\n  return number + 'th';\n};\n\nvar localize = {\n  ordinalNumber: ordinalNumber,\n  era: buildLocalizeFn({\n    values: eraValues,\n    defaultWidth: 'wide'\n  }),\n  quarter: buildLocalizeFn({\n    values: quarterValues,\n    defaultWidth: 'wide',\n    argumentCallback: function (quarter) {\n      return quarter - 1;\n    }\n  }),\n  month: buildLocalizeFn({\n    values: monthValues,\n    defaultWidth: 'wide'\n  }),\n  day: buildLocalizeFn({\n    values: dayValues,\n    defaultWidth: 'wide'\n  }),\n  dayPeriod: buildLocalizeFn({\n    values: dayPeriodValues,\n    defaultWidth: 'wide',\n    formattingValues: formattingDayPeriodValues,\n    defaultFormattingWidth: 'wide'\n  })\n};\nexport default localize;","import buildMatchFn from \"../../../_lib/buildMatchFn/index.js\";\nimport buildMatchPatternFn from \"../../../_lib/buildMatchPatternFn/index.js\";\nvar matchOrdinalNumberPattern = /^(\\d+)(th|st|nd|rd)?/i;\nvar parseOrdinalNumberPattern = /\\d+/i;\nvar matchEraPatterns = {\n  narrow: /^(b|a)/i,\n  abbreviated: /^(b\\.?\\s?c\\.?|b\\.?\\s?c\\.?\\s?e\\.?|a\\.?\\s?d\\.?|c\\.?\\s?e\\.?)/i,\n  wide: /^(before christ|before common era|anno domini|common era)/i\n};\nvar parseEraPatterns = {\n  any: [/^b/i, /^(a|c)/i]\n};\nvar matchQuarterPatterns = {\n  narrow: /^[1234]/i,\n  abbreviated: /^q[1234]/i,\n  wide: /^[1234](th|st|nd|rd)? quarter/i\n};\nvar parseQuarterPatterns = {\n  any: [/1/i, /2/i, /3/i, /4/i]\n};\nvar matchMonthPatterns = {\n  narrow: /^[jfmasond]/i,\n  abbreviated: /^(jan|feb|mar|apr|may|jun|jul|aug|sep|oct|nov|dec)/i,\n  wide: /^(january|february|march|april|may|june|july|august|september|october|november|december)/i\n};\nvar parseMonthPatterns = {\n  narrow: [/^j/i, /^f/i, /^m/i, /^a/i, /^m/i, /^j/i, /^j/i, /^a/i, /^s/i, /^o/i, /^n/i, /^d/i],\n  any: [/^ja/i, /^f/i, /^mar/i, /^ap/i, /^may/i, /^jun/i, /^jul/i, /^au/i, /^s/i, /^o/i, /^n/i, /^d/i]\n};\nvar matchDayPatterns = {\n  narrow: /^[smtwf]/i,\n  short: /^(su|mo|tu|we|th|fr|sa)/i,\n  abbreviated: /^(sun|mon|tue|wed|thu|fri|sat)/i,\n  wide: /^(sunday|monday|tuesday|wednesday|thursday|friday|saturday)/i\n};\nvar parseDayPatterns = {\n  narrow: [/^s/i, /^m/i, /^t/i, /^w/i, /^t/i, /^f/i, /^s/i],\n  any: [/^su/i, /^m/i, /^tu/i, /^w/i, /^th/i, /^f/i, /^sa/i]\n};\nvar matchDayPeriodPatterns = {\n  narrow: /^(a|p|mi|n|(in the|at) (morning|afternoon|evening|night))/i,\n  any: /^([ap]\\.?\\s?m\\.?|midnight|noon|(in the|at) (morning|afternoon|evening|night))/i\n};\nvar parseDayPeriodPatterns = {\n  any: {\n    am: /^a/i,\n    pm: /^p/i,\n    midnight: /^mi/i,\n    noon: /^no/i,\n    morning: /morning/i,\n    afternoon: /afternoon/i,\n    evening: /evening/i,\n    night: /night/i\n  }\n};\nvar match = {\n  ordinalNumber: buildMatchPatternFn({\n    matchPattern: matchOrdinalNumberPattern,\n    parsePattern: parseOrdinalNumberPattern,\n    valueCallback: function (value) {\n      return parseInt(value, 10);\n    }\n  }),\n  era: buildMatchFn({\n    matchPatterns: matchEraPatterns,\n    defaultMatchWidth: 'wide',\n    parsePatterns: parseEraPatterns,\n    defaultParseWidth: 'any'\n  }),\n  quarter: buildMatchFn({\n    matchPatterns: matchQuarterPatterns,\n    defaultMatchWidth: 'wide',\n    parsePatterns: parseQuarterPatterns,\n    defaultParseWidth: 'any',\n    valueCallback: function (index) {\n      return index + 1;\n    }\n  }),\n  month: buildMatchFn({\n    matchPatterns: matchMonthPatterns,\n    defaultMatchWidth: 'wide',\n    parsePatterns: parseMonthPatterns,\n    defaultParseWidth: 'any'\n  }),\n  day: buildMatchFn({\n    matchPatterns: matchDayPatterns,\n    defaultMatchWidth: 'wide',\n    parsePatterns: parseDayPatterns,\n    defaultParseWidth: 'any'\n  }),\n  dayPeriod: buildMatchFn({\n    matchPatterns: matchDayPeriodPatterns,\n    defaultMatchWidth: 'any',\n    parsePatterns: parseDayPeriodPatterns,\n    defaultParseWidth: 'any'\n  })\n};\nexport default match;","export default function buildMatchPatternFn(args) {\n  return function (string) {\n    var options = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : {};\n    var matchResult = string.match(args.matchPattern);\n    if (!matchResult) return null;\n    var matchedString = matchResult[0];\n    var parseResult = string.match(args.parsePattern);\n    if (!parseResult) return null;\n    var value = args.valueCallback ? args.valueCallback(parseResult[0]) : parseResult[0];\n    value = options.valueCallback ? options.valueCallback(value) : value;\n    var rest = string.slice(matchedString.length);\n    return {\n      value: value,\n      rest: rest\n    };\n  };\n}","import isDate from \"../isDate/index.js\";\nimport toDate from \"../toDate/index.js\";\nimport requiredArgs from \"../_lib/requiredArgs/index.js\";\n/**\n * @name isValid\n * @category Common Helpers\n * @summary Is the given date valid?\n *\n * @description\n * Returns false if argument is Invalid Date and true otherwise.\n * Argument is converted to Date using `toDate`. See [toDate]{@link https://date-fns.org/docs/toDate}\n * Invalid Date is a Date, whose time value is NaN.\n *\n * Time value of Date: http://es5.github.io/#x15.9.1.1\n *\n * ### v2.0.0 breaking changes:\n *\n * - [Changes that are common for the whole library](https://github.com/date-fns/date-fns/blob/master/docs/upgradeGuide.md#Common-Changes).\n *\n * - Now `isValid` doesn't throw an exception\n *   if the first argument is not an instance of Date.\n *   Instead, argument is converted beforehand using `toDate`.\n *\n *   Examples:\n *\n *   | `isValid` argument        | Before v2.0.0 | v2.0.0 onward |\n *   |---------------------------|---------------|---------------|\n *   | `new Date()`              | `true`        | `true`        |\n *   | `new Date('2016-01-01')`  | `true`        | `true`        |\n *   | `new Date('')`            | `false`       | `false`       |\n *   | `new Date(1488370835081)` | `true`        | `true`        |\n *   | `new Date(NaN)`           | `false`       | `false`       |\n *   | `'2016-01-01'`            | `TypeError`   | `false`       |\n *   | `''`                      | `TypeError`   | `false`       |\n *   | `1488370835081`           | `TypeError`   | `true`        |\n *   | `NaN`                     | `TypeError`   | `false`       |\n *\n *   We introduce this change to make *date-fns* consistent with ECMAScript behavior\n *   that try to coerce arguments to the expected type\n *   (which is also the case with other *date-fns* functions).\n *\n * @param {*} date - the date to check\n * @returns {Boolean} the date is valid\n * @throws {TypeError} 1 argument required\n *\n * @example\n * // For the valid date:\n * const result = isValid(new Date(2014, 1, 31))\n * //=> true\n *\n * @example\n * // For the value, convertable into a date:\n * const result = isValid(1393804800000)\n * //=> true\n *\n * @example\n * // For the invalid date:\n * const result = isValid(new Date(''))\n * //=> false\n */\n\nexport default function isValid(dirtyDate) {\n  requiredArgs(1, arguments);\n\n  if (!isDate(dirtyDate) && typeof dirtyDate !== 'number') {\n    return false;\n  }\n\n  var date = toDate(dirtyDate);\n  return !isNaN(Number(date));\n}","import requiredArgs from \"../_lib/requiredArgs/index.js\";\n/**\n * @name isDate\n * @category Common Helpers\n * @summary Is the given value a date?\n *\n * @description\n * Returns true if the given value is an instance of Date. The function works for dates transferred across iframes.\n *\n * ### v2.0.0 breaking changes:\n *\n * - [Changes that are common for the whole library](https://github.com/date-fns/date-fns/blob/master/docs/upgradeGuide.md#Common-Changes).\n *\n * @param {*} value - the value to check\n * @returns {boolean} true if the given value is a date\n * @throws {TypeError} 1 arguments required\n *\n * @example\n * // For a valid date:\n * const result = isDate(new Date())\n * //=> true\n *\n * @example\n * // For an invalid date:\n * const result = isDate(new Date(NaN))\n * //=> true\n *\n * @example\n * // For some value:\n * const result = isDate('2014-02-31')\n * //=> false\n *\n * @example\n * // For an object:\n * const result = isDate({})\n * //=> false\n */\n\nexport default function isDate(value) {\n  requiredArgs(1, arguments);\n  return value instanceof Date || typeof value === 'object' && Object.prototype.toString.call(value) === '[object Date]';\n}","/**\n * Google Chrome as of 67.0.3396.87 introduced timezones with offset that includes seconds.\n * They usually appear for dates that denote time before the timezones were introduced\n * (e.g. for 'Europe/Prague' timezone the offset is GMT+00:57:44 before 1 October 1891\n * and GMT+01:00:00 after that date)\n *\n * Date#getTimezoneOffset returns the offset in minutes and would return 57 for the example above,\n * which would lead to incorrect calculations.\n *\n * This function returns the timezone offset in milliseconds that takes seconds in account.\n */\nexport default function getTimezoneOffsetInMilliseconds(date) {\n  var utcDate = new Date(Date.UTC(date.getFullYear(), date.getMonth(), date.getDate(), date.getHours(), date.getMinutes(), date.getSeconds(), date.getMilliseconds()));\n  utcDate.setUTCFullYear(date.getFullYear());\n  return date.getTime() - utcDate.getTime();\n}","import toInteger from \"../_lib/toInteger/index.js\";\nimport addMilliseconds from \"../addMilliseconds/index.js\";\nimport requiredArgs from \"../_lib/requiredArgs/index.js\";\n/**\n * @name subMilliseconds\n * @category Millisecond Helpers\n * @summary Subtract the specified number of milliseconds from the given date.\n *\n * @description\n * Subtract the specified number of milliseconds from the given date.\n *\n * ### v2.0.0 breaking changes:\n *\n * - [Changes that are common for the whole library](https://github.com/date-fns/date-fns/blob/master/docs/upgradeGuide.md#Common-Changes).\n *\n * @param {Date|Number} date - the date to be changed\n * @param {Number} amount - the amount of milliseconds to be subtracted. Positive decimals will be rounded using `Math.floor`, decimals less than zero will be rounded using `Math.ceil`.\n * @returns {Date} the new date with the milliseconds subtracted\n * @throws {TypeError} 2 arguments required\n *\n * @example\n * // Subtract 750 milliseconds from 10 July 2014 12:45:30.000:\n * const result = subMilliseconds(new Date(2014, 6, 10, 12, 45, 30, 0), 750)\n * //=> Thu Jul 10 2014 12:45:29.250\n */\n\nexport default function subMilliseconds(dirtyDate, dirtyAmount) {\n  requiredArgs(2, arguments);\n  var amount = toInteger(dirtyAmount);\n  return addMilliseconds(dirtyDate, -amount);\n}","import toInteger from \"../_lib/toInteger/index.js\";\nimport toDate from \"../toDate/index.js\";\nimport requiredArgs from \"../_lib/requiredArgs/index.js\";\n/**\n * @name addMilliseconds\n * @category Millisecond Helpers\n * @summary Add the specified number of milliseconds to the given date.\n *\n * @description\n * Add the specified number of milliseconds to the given date.\n *\n * ### v2.0.0 breaking changes:\n *\n * - [Changes that are common for the whole library](https://github.com/date-fns/date-fns/blob/master/docs/upgradeGuide.md#Common-Changes).\n *\n * @param {Date|Number} date - the date to be changed\n * @param {Number} amount - the amount of milliseconds to be added. Positive decimals will be rounded using `Math.floor`, decimals less than zero will be rounded using `Math.ceil`.\n * @returns {Date} the new date with the milliseconds added\n * @throws {TypeError} 2 arguments required\n *\n * @example\n * // Add 750 milliseconds to 10 July 2014 12:45:30.000:\n * const result = addMilliseconds(new Date(2014, 6, 10, 12, 45, 30, 0), 750)\n * //=> Thu Jul 10 2014 12:45:30.750\n */\n\nexport default function addMilliseconds(dirtyDate, dirtyAmount) {\n  requiredArgs(2, arguments);\n  var timestamp = toDate(dirtyDate).getTime();\n  var amount = toInteger(dirtyAmount);\n  return new Date(timestamp + amount);\n}","function dateLongFormatter(pattern, formatLong) {\n  switch (pattern) {\n    case 'P':\n      return formatLong.date({\n        width: 'short'\n      });\n\n    case 'PP':\n      return formatLong.date({\n        width: 'medium'\n      });\n\n    case 'PPP':\n      return formatLong.date({\n        width: 'long'\n      });\n\n    case 'PPPP':\n    default:\n      return formatLong.date({\n        width: 'full'\n      });\n  }\n}\n\nfunction timeLongFormatter(pattern, formatLong) {\n  switch (pattern) {\n    case 'p':\n      return formatLong.time({\n        width: 'short'\n      });\n\n    case 'pp':\n      return formatLong.time({\n        width: 'medium'\n      });\n\n    case 'ppp':\n      return formatLong.time({\n        width: 'long'\n      });\n\n    case 'pppp':\n    default:\n      return formatLong.time({\n        width: 'full'\n      });\n  }\n}\n\nfunction dateTimeLongFormatter(pattern, formatLong) {\n  var matchResult = pattern.match(/(P+)(p+)?/) || [];\n  var datePattern = matchResult[1];\n  var timePattern = matchResult[2];\n\n  if (!timePattern) {\n    return dateLongFormatter(pattern, formatLong);\n  }\n\n  var dateTimeFormat;\n\n  switch (datePattern) {\n    case 'P':\n      dateTimeFormat = formatLong.dateTime({\n        width: 'short'\n      });\n      break;\n\n    case 'PP':\n      dateTimeFormat = formatLong.dateTime({\n        width: 'medium'\n      });\n      break;\n\n    case 'PPP':\n      dateTimeFormat = formatLong.dateTime({\n        width: 'long'\n      });\n      break;\n\n    case 'PPPP':\n    default:\n      dateTimeFormat = formatLong.dateTime({\n        width: 'full'\n      });\n      break;\n  }\n\n  return dateTimeFormat.replace('{{date}}', dateLongFormatter(datePattern, formatLong)).replace('{{time}}', timeLongFormatter(timePattern, formatLong));\n}\n\nvar longFormatters = {\n  p: timeLongFormatter,\n  P: dateTimeLongFormatter\n};\nexport default longFormatters;","import getUTCDayOfYear from \"../../../_lib/getUTCDayOfYear/index.js\";\nimport getUTCISOWeek from \"../../../_lib/getUTCISOWeek/index.js\";\nimport getUTCISOWeekYear from \"../../../_lib/getUTCISOWeekYear/index.js\";\nimport getUTCWeek from \"../../../_lib/getUTCWeek/index.js\";\nimport getUTCWeekYear from \"../../../_lib/getUTCWeekYear/index.js\";\nimport addLeadingZeros from \"../../addLeadingZeros/index.js\";\nimport lightFormatters from \"../lightFormatters/index.js\";\nvar dayPeriodEnum = {\n  am: 'am',\n  pm: 'pm',\n  midnight: 'midnight',\n  noon: 'noon',\n  morning: 'morning',\n  afternoon: 'afternoon',\n  evening: 'evening',\n  night: 'night'\n};\n/*\n * |     | Unit                           |     | Unit                           |\n * |-----|--------------------------------|-----|--------------------------------|\n * |  a  | AM, PM                         |  A* | Milliseconds in day            |\n * |  b  | AM, PM, noon, midnight         |  B  | Flexible day period            |\n * |  c  | Stand-alone local day of week  |  C* | Localized hour w/ day period   |\n * |  d  | Day of month                   |  D  | Day of year                    |\n * |  e  | Local day of week              |  E  | Day of week                    |\n * |  f  |                                |  F* | Day of week in month           |\n * |  g* | Modified Julian day            |  G  | Era                            |\n * |  h  | Hour [1-12]                    |  H  | Hour [0-23]                    |\n * |  i! | ISO day of week                |  I! | ISO week of year               |\n * |  j* | Localized hour w/ day period   |  J* | Localized hour w/o day period  |\n * |  k  | Hour [1-24]                    |  K  | Hour [0-11]                    |\n * |  l* | (deprecated)                   |  L  | Stand-alone month              |\n * |  m  | Minute                         |  M  | Month                          |\n * |  n  |                                |  N  |                                |\n * |  o! | Ordinal number modifier        |  O  | Timezone (GMT)                 |\n * |  p! | Long localized time            |  P! | Long localized date            |\n * |  q  | Stand-alone quarter            |  Q  | Quarter                        |\n * |  r* | Related Gregorian year         |  R! | ISO week-numbering year        |\n * |  s  | Second                         |  S  | Fraction of second             |\n * |  t! | Seconds timestamp              |  T! | Milliseconds timestamp         |\n * |  u  | Extended year                  |  U* | Cyclic year                    |\n * |  v* | Timezone (generic non-locat.)  |  V* | Timezone (location)            |\n * |  w  | Local week of year             |  W* | Week of month                  |\n * |  x  | Timezone (ISO-8601 w/o Z)      |  X  | Timezone (ISO-8601)            |\n * |  y  | Year (abs)                     |  Y  | Local week-numbering year      |\n * |  z  | Timezone (specific non-locat.) |  Z* | Timezone (aliases)             |\n *\n * Letters marked by * are not implemented but reserved by Unicode standard.\n *\n * Letters marked by ! are non-standard, but implemented by date-fns:\n * - `o` modifies the previous token to turn it into an ordinal (see `format` docs)\n * - `i` is ISO day of week. For `i` and `ii` is returns numeric ISO week days,\n *   i.e. 7 for Sunday, 1 for Monday, etc.\n * - `I` is ISO week of year, as opposed to `w` which is local week of year.\n * - `R` is ISO week-numbering year, as opposed to `Y` which is local week-numbering year.\n *   `R` is supposed to be used in conjunction with `I` and `i`\n *   for universal ISO week-numbering date, whereas\n *   `Y` is supposed to be used in conjunction with `w` and `e`\n *   for week-numbering date specific to the locale.\n * - `P` is long localized date format\n * - `p` is long localized time format\n */\n\nvar formatters = {\n  // Era\n  G: function (date, token, localize) {\n    var era = date.getUTCFullYear() > 0 ? 1 : 0;\n\n    switch (token) {\n      // AD, BC\n      case 'G':\n      case 'GG':\n      case 'GGG':\n        return localize.era(era, {\n          width: 'abbreviated'\n        });\n      // A, B\n\n      case 'GGGGG':\n        return localize.era(era, {\n          width: 'narrow'\n        });\n      // Anno Domini, Before Christ\n\n      case 'GGGG':\n      default:\n        return localize.era(era, {\n          width: 'wide'\n        });\n    }\n  },\n  // Year\n  y: function (date, token, localize) {\n    // Ordinal number\n    if (token === 'yo') {\n      var signedYear = date.getUTCFullYear(); // Returns 1 for 1 BC (which is year 0 in JavaScript)\n\n      var year = signedYear > 0 ? signedYear : 1 - signedYear;\n      return localize.ordinalNumber(year, {\n        unit: 'year'\n      });\n    }\n\n    return lightFormatters.y(date, token);\n  },\n  // Local week-numbering year\n  Y: function (date, token, localize, options) {\n    var signedWeekYear = getUTCWeekYear(date, options); // Returns 1 for 1 BC (which is year 0 in JavaScript)\n\n    var weekYear = signedWeekYear > 0 ? signedWeekYear : 1 - signedWeekYear; // Two digit year\n\n    if (token === 'YY') {\n      var twoDigitYear = weekYear % 100;\n      return addLeadingZeros(twoDigitYear, 2);\n    } // Ordinal number\n\n\n    if (token === 'Yo') {\n      return localize.ordinalNumber(weekYear, {\n        unit: 'year'\n      });\n    } // Padding\n\n\n    return addLeadingZeros(weekYear, token.length);\n  },\n  // ISO week-numbering year\n  R: function (date, token) {\n    var isoWeekYear = getUTCISOWeekYear(date); // Padding\n\n    return addLeadingZeros(isoWeekYear, token.length);\n  },\n  // Extended year. This is a single number designating the year of this calendar system.\n  // The main difference between `y` and `u` localizers are B.C. years:\n  // | Year | `y` | `u` |\n  // |------|-----|-----|\n  // | AC 1 |   1 |   1 |\n  // | BC 1 |   1 |   0 |\n  // | BC 2 |   2 |  -1 |\n  // Also `yy` always returns the last two digits of a year,\n  // while `uu` pads single digit years to 2 characters and returns other years unchanged.\n  u: function (date, token) {\n    var year = date.getUTCFullYear();\n    return addLeadingZeros(year, token.length);\n  },\n  // Quarter\n  Q: function (date, token, localize) {\n    var quarter = Math.ceil((date.getUTCMonth() + 1) / 3);\n\n    switch (token) {\n      // 1, 2, 3, 4\n      case 'Q':\n        return String(quarter);\n      // 01, 02, 03, 04\n\n      case 'QQ':\n        return addLeadingZeros(quarter, 2);\n      // 1st, 2nd, 3rd, 4th\n\n      case 'Qo':\n        return localize.ordinalNumber(quarter, {\n          unit: 'quarter'\n        });\n      // Q1, Q2, Q3, Q4\n\n      case 'QQQ':\n        return localize.quarter(quarter, {\n          width: 'abbreviated',\n          context: 'formatting'\n        });\n      // 1, 2, 3, 4 (narrow quarter; could be not numerical)\n\n      case 'QQQQQ':\n        return localize.quarter(quarter, {\n          width: 'narrow',\n          context: 'formatting'\n        });\n      // 1st quarter, 2nd quarter, ...\n\n      case 'QQQQ':\n      default:\n        return localize.quarter(quarter, {\n          width: 'wide',\n          context: 'formatting'\n        });\n    }\n  },\n  // Stand-alone quarter\n  q: function (date, token, localize) {\n    var quarter = Math.ceil((date.getUTCMonth() + 1) / 3);\n\n    switch (token) {\n      // 1, 2, 3, 4\n      case 'q':\n        return String(quarter);\n      // 01, 02, 03, 04\n\n      case 'qq':\n        return addLeadingZeros(quarter, 2);\n      // 1st, 2nd, 3rd, 4th\n\n      case 'qo':\n        return localize.ordinalNumber(quarter, {\n          unit: 'quarter'\n        });\n      // Q1, Q2, Q3, Q4\n\n      case 'qqq':\n        return localize.quarter(quarter, {\n          width: 'abbreviated',\n          context: 'standalone'\n        });\n      // 1, 2, 3, 4 (narrow quarter; could be not numerical)\n\n      case 'qqqqq':\n        return localize.quarter(quarter, {\n          width: 'narrow',\n          context: 'standalone'\n        });\n      // 1st quarter, 2nd quarter, ...\n\n      case 'qqqq':\n      default:\n        return localize.quarter(quarter, {\n          width: 'wide',\n          context: 'standalone'\n        });\n    }\n  },\n  // Month\n  M: function (date, token, localize) {\n    var month = date.getUTCMonth();\n\n    switch (token) {\n      case 'M':\n      case 'MM':\n        return lightFormatters.M(date, token);\n      // 1st, 2nd, ..., 12th\n\n      case 'Mo':\n        return localize.ordinalNumber(month + 1, {\n          unit: 'month'\n        });\n      // Jan, Feb, ..., Dec\n\n      case 'MMM':\n        return localize.month(month, {\n          width: 'abbreviated',\n          context: 'formatting'\n        });\n      // J, F, ..., D\n\n      case 'MMMMM':\n        return localize.month(month, {\n          width: 'narrow',\n          context: 'formatting'\n        });\n      // January, February, ..., December\n\n      case 'MMMM':\n      default:\n        return localize.month(month, {\n          width: 'wide',\n          context: 'formatting'\n        });\n    }\n  },\n  // Stand-alone month\n  L: function (date, token, localize) {\n    var month = date.getUTCMonth();\n\n    switch (token) {\n      // 1, 2, ..., 12\n      case 'L':\n        return String(month + 1);\n      // 01, 02, ..., 12\n\n      case 'LL':\n        return addLeadingZeros(month + 1, 2);\n      // 1st, 2nd, ..., 12th\n\n      case 'Lo':\n        return localize.ordinalNumber(month + 1, {\n          unit: 'month'\n        });\n      // Jan, Feb, ..., Dec\n\n      case 'LLL':\n        return localize.month(month, {\n          width: 'abbreviated',\n          context: 'standalone'\n        });\n      // J, F, ..., D\n\n      case 'LLLLL':\n        return localize.month(month, {\n          width: 'narrow',\n          context: 'standalone'\n        });\n      // January, February, ..., December\n\n      case 'LLLL':\n      default:\n        return localize.month(month, {\n          width: 'wide',\n          context: 'standalone'\n        });\n    }\n  },\n  // Local week of year\n  w: function (date, token, localize, options) {\n    var week = getUTCWeek(date, options);\n\n    if (token === 'wo') {\n      return localize.ordinalNumber(week, {\n        unit: 'week'\n      });\n    }\n\n    return addLeadingZeros(week, token.length);\n  },\n  // ISO week of year\n  I: function (date, token, localize) {\n    var isoWeek = getUTCISOWeek(date);\n\n    if (token === 'Io') {\n      return localize.ordinalNumber(isoWeek, {\n        unit: 'week'\n      });\n    }\n\n    return addLeadingZeros(isoWeek, token.length);\n  },\n  // Day of the month\n  d: function (date, token, localize) {\n    if (token === 'do') {\n      return localize.ordinalNumber(date.getUTCDate(), {\n        unit: 'date'\n      });\n    }\n\n    return lightFormatters.d(date, token);\n  },\n  // Day of year\n  D: function (date, token, localize) {\n    var dayOfYear = getUTCDayOfYear(date);\n\n    if (token === 'Do') {\n      return localize.ordinalNumber(dayOfYear, {\n        unit: 'dayOfYear'\n      });\n    }\n\n    return addLeadingZeros(dayOfYear, token.length);\n  },\n  // Day of week\n  E: function (date, token, localize) {\n    var dayOfWeek = date.getUTCDay();\n\n    switch (token) {\n      // Tue\n      case 'E':\n      case 'EE':\n      case 'EEE':\n        return localize.day(dayOfWeek, {\n          width: 'abbreviated',\n          context: 'formatting'\n        });\n      // T\n\n      case 'EEEEE':\n        return localize.day(dayOfWeek, {\n          width: 'narrow',\n          context: 'formatting'\n        });\n      // Tu\n\n      case 'EEEEEE':\n        return localize.day(dayOfWeek, {\n          width: 'short',\n          context: 'formatting'\n        });\n      // Tuesday\n\n      case 'EEEE':\n      default:\n        return localize.day(dayOfWeek, {\n          width: 'wide',\n          context: 'formatting'\n        });\n    }\n  },\n  // Local day of week\n  e: function (date, token, localize, options) {\n    var dayOfWeek = date.getUTCDay();\n    var localDayOfWeek = (dayOfWeek - options.weekStartsOn + 8) % 7 || 7;\n\n    switch (token) {\n      // Numerical value (Nth day of week with current locale or weekStartsOn)\n      case 'e':\n        return String(localDayOfWeek);\n      // Padded numerical value\n\n      case 'ee':\n        return addLeadingZeros(localDayOfWeek, 2);\n      // 1st, 2nd, ..., 7th\n\n      case 'eo':\n        return localize.ordinalNumber(localDayOfWeek, {\n          unit: 'day'\n        });\n\n      case 'eee':\n        return localize.day(dayOfWeek, {\n          width: 'abbreviated',\n          context: 'formatting'\n        });\n      // T\n\n      case 'eeeee':\n        return localize.day(dayOfWeek, {\n          width: 'narrow',\n          context: 'formatting'\n        });\n      // Tu\n\n      case 'eeeeee':\n        return localize.day(dayOfWeek, {\n          width: 'short',\n          context: 'formatting'\n        });\n      // Tuesday\n\n      case 'eeee':\n      default:\n        return localize.day(dayOfWeek, {\n          width: 'wide',\n          context: 'formatting'\n        });\n    }\n  },\n  // Stand-alone local day of week\n  c: function (date, token, localize, options) {\n    var dayOfWeek = date.getUTCDay();\n    var localDayOfWeek = (dayOfWeek - options.weekStartsOn + 8) % 7 || 7;\n\n    switch (token) {\n      // Numerical value (same as in `e`)\n      case 'c':\n        return String(localDayOfWeek);\n      // Padded numerical value\n\n      case 'cc':\n        return addLeadingZeros(localDayOfWeek, token.length);\n      // 1st, 2nd, ..., 7th\n\n      case 'co':\n        return localize.ordinalNumber(localDayOfWeek, {\n          unit: 'day'\n        });\n\n      case 'ccc':\n        return localize.day(dayOfWeek, {\n          width: 'abbreviated',\n          context: 'standalone'\n        });\n      // T\n\n      case 'ccccc':\n        return localize.day(dayOfWeek, {\n          width: 'narrow',\n          context: 'standalone'\n        });\n      // Tu\n\n      case 'cccccc':\n        return localize.day(dayOfWeek, {\n          width: 'short',\n          context: 'standalone'\n        });\n      // Tuesday\n\n      case 'cccc':\n      default:\n        return localize.day(dayOfWeek, {\n          width: 'wide',\n          context: 'standalone'\n        });\n    }\n  },\n  // ISO day of week\n  i: function (date, token, localize) {\n    var dayOfWeek = date.getUTCDay();\n    var isoDayOfWeek = dayOfWeek === 0 ? 7 : dayOfWeek;\n\n    switch (token) {\n      // 2\n      case 'i':\n        return String(isoDayOfWeek);\n      // 02\n\n      case 'ii':\n        return addLeadingZeros(isoDayOfWeek, token.length);\n      // 2nd\n\n      case 'io':\n        return localize.ordinalNumber(isoDayOfWeek, {\n          unit: 'day'\n        });\n      // Tue\n\n      case 'iii':\n        return localize.day(dayOfWeek, {\n          width: 'abbreviated',\n          context: 'formatting'\n        });\n      // T\n\n      case 'iiiii':\n        return localize.day(dayOfWeek, {\n          width: 'narrow',\n          context: 'formatting'\n        });\n      // Tu\n\n      case 'iiiiii':\n        return localize.day(dayOfWeek, {\n          width: 'short',\n          context: 'formatting'\n        });\n      // Tuesday\n\n      case 'iiii':\n      default:\n        return localize.day(dayOfWeek, {\n          width: 'wide',\n          context: 'formatting'\n        });\n    }\n  },\n  // AM or PM\n  a: function (date, token, localize) {\n    var hours = date.getUTCHours();\n    var dayPeriodEnumValue = hours / 12 >= 1 ? 'pm' : 'am';\n\n    switch (token) {\n      case 'a':\n      case 'aa':\n        return localize.dayPeriod(dayPeriodEnumValue, {\n          width: 'abbreviated',\n          context: 'formatting'\n        });\n\n      case 'aaa':\n        return localize.dayPeriod(dayPeriodEnumValue, {\n          width: 'abbreviated',\n          context: 'formatting'\n        }).toLowerCase();\n\n      case 'aaaaa':\n        return localize.dayPeriod(dayPeriodEnumValue, {\n          width: 'narrow',\n          context: 'formatting'\n        });\n\n      case 'aaaa':\n      default:\n        return localize.dayPeriod(dayPeriodEnumValue, {\n          width: 'wide',\n          context: 'formatting'\n        });\n    }\n  },\n  // AM, PM, midnight, noon\n  b: function (date, token, localize) {\n    var hours = date.getUTCHours();\n    var dayPeriodEnumValue;\n\n    if (hours === 12) {\n      dayPeriodEnumValue = dayPeriodEnum.noon;\n    } else if (hours === 0) {\n      dayPeriodEnumValue = dayPeriodEnum.midnight;\n    } else {\n      dayPeriodEnumValue = hours / 12 >= 1 ? 'pm' : 'am';\n    }\n\n    switch (token) {\n      case 'b':\n      case 'bb':\n        return localize.dayPeriod(dayPeriodEnumValue, {\n          width: 'abbreviated',\n          context: 'formatting'\n        });\n\n      case 'bbb':\n        return localize.dayPeriod(dayPeriodEnumValue, {\n          width: 'abbreviated',\n          context: 'formatting'\n        }).toLowerCase();\n\n      case 'bbbbb':\n        return localize.dayPeriod(dayPeriodEnumValue, {\n          width: 'narrow',\n          context: 'formatting'\n        });\n\n      case 'bbbb':\n      default:\n        return localize.dayPeriod(dayPeriodEnumValue, {\n          width: 'wide',\n          context: 'formatting'\n        });\n    }\n  },\n  // in the morning, in the afternoon, in the evening, at night\n  B: function (date, token, localize) {\n    var hours = date.getUTCHours();\n    var dayPeriodEnumValue;\n\n    if (hours >= 17) {\n      dayPeriodEnumValue = dayPeriodEnum.evening;\n    } else if (hours >= 12) {\n      dayPeriodEnumValue = dayPeriodEnum.afternoon;\n    } else if (hours >= 4) {\n      dayPeriodEnumValue = dayPeriodEnum.morning;\n    } else {\n      dayPeriodEnumValue = dayPeriodEnum.night;\n    }\n\n    switch (token) {\n      case 'B':\n      case 'BB':\n      case 'BBB':\n        return localize.dayPeriod(dayPeriodEnumValue, {\n          width: 'abbreviated',\n          context: 'formatting'\n        });\n\n      case 'BBBBB':\n        return localize.dayPeriod(dayPeriodEnumValue, {\n          width: 'narrow',\n          context: 'formatting'\n        });\n\n      case 'BBBB':\n      default:\n        return localize.dayPeriod(dayPeriodEnumValue, {\n          width: 'wide',\n          context: 'formatting'\n        });\n    }\n  },\n  // Hour [1-12]\n  h: function (date, token, localize) {\n    if (token === 'ho') {\n      var hours = date.getUTCHours() % 12;\n      if (hours === 0) hours = 12;\n      return localize.ordinalNumber(hours, {\n        unit: 'hour'\n      });\n    }\n\n    return lightFormatters.h(date, token);\n  },\n  // Hour [0-23]\n  H: function (date, token, localize) {\n    if (token === 'Ho') {\n      return localize.ordinalNumber(date.getUTCHours(), {\n        unit: 'hour'\n      });\n    }\n\n    return lightFormatters.H(date, token);\n  },\n  // Hour [0-11]\n  K: function (date, token, localize) {\n    var hours = date.getUTCHours() % 12;\n\n    if (token === 'Ko') {\n      return localize.ordinalNumber(hours, {\n        unit: 'hour'\n      });\n    }\n\n    return addLeadingZeros(hours, token.length);\n  },\n  // Hour [1-24]\n  k: function (date, token, localize) {\n    var hours = date.getUTCHours();\n    if (hours === 0) hours = 24;\n\n    if (token === 'ko') {\n      return localize.ordinalNumber(hours, {\n        unit: 'hour'\n      });\n    }\n\n    return addLeadingZeros(hours, token.length);\n  },\n  // Minute\n  m: function (date, token, localize) {\n    if (token === 'mo') {\n      return localize.ordinalNumber(date.getUTCMinutes(), {\n        unit: 'minute'\n      });\n    }\n\n    return lightFormatters.m(date, token);\n  },\n  // Second\n  s: function (date, token, localize) {\n    if (token === 'so') {\n      return localize.ordinalNumber(date.getUTCSeconds(), {\n        unit: 'second'\n      });\n    }\n\n    return lightFormatters.s(date, token);\n  },\n  // Fraction of second\n  S: function (date, token) {\n    return lightFormatters.S(date, token);\n  },\n  // Timezone (ISO-8601. If offset is 0, output is always `'Z'`)\n  X: function (date, token, _localize, options) {\n    var originalDate = options._originalDate || date;\n    var timezoneOffset = originalDate.getTimezoneOffset();\n\n    if (timezoneOffset === 0) {\n      return 'Z';\n    }\n\n    switch (token) {\n      // Hours and optional minutes\n      case 'X':\n        return formatTimezoneWithOptionalMinutes(timezoneOffset);\n      // Hours, minutes and optional seconds without `:` delimiter\n      // Note: neither ISO-8601 nor JavaScript supports seconds in timezone offsets\n      // so this token always has the same output as `XX`\n\n      case 'XXXX':\n      case 'XX':\n        // Hours and minutes without `:` delimiter\n        return formatTimezone(timezoneOffset);\n      // Hours, minutes and optional seconds with `:` delimiter\n      // Note: neither ISO-8601 nor JavaScript supports seconds in timezone offsets\n      // so this token always has the same output as `XXX`\n\n      case 'XXXXX':\n      case 'XXX': // Hours and minutes with `:` delimiter\n\n      default:\n        return formatTimezone(timezoneOffset, ':');\n    }\n  },\n  // Timezone (ISO-8601. If offset is 0, output is `'+00:00'` or equivalent)\n  x: function (date, token, _localize, options) {\n    var originalDate = options._originalDate || date;\n    var timezoneOffset = originalDate.getTimezoneOffset();\n\n    switch (token) {\n      // Hours and optional minutes\n      case 'x':\n        return formatTimezoneWithOptionalMinutes(timezoneOffset);\n      // Hours, minutes and optional seconds without `:` delimiter\n      // Note: neither ISO-8601 nor JavaScript supports seconds in timezone offsets\n      // so this token always has the same output as `xx`\n\n      case 'xxxx':\n      case 'xx':\n        // Hours and minutes without `:` delimiter\n        return formatTimezone(timezoneOffset);\n      // Hours, minutes and optional seconds with `:` delimiter\n      // Note: neither ISO-8601 nor JavaScript supports seconds in timezone offsets\n      // so this token always has the same output as `xxx`\n\n      case 'xxxxx':\n      case 'xxx': // Hours and minutes with `:` delimiter\n\n      default:\n        return formatTimezone(timezoneOffset, ':');\n    }\n  },\n  // Timezone (GMT)\n  O: function (date, token, _localize, options) {\n    var originalDate = options._originalDate || date;\n    var timezoneOffset = originalDate.getTimezoneOffset();\n\n    switch (token) {\n      // Short\n      case 'O':\n      case 'OO':\n      case 'OOO':\n        return 'GMT' + formatTimezoneShort(timezoneOffset, ':');\n      // Long\n\n      case 'OOOO':\n      default:\n        return 'GMT' + formatTimezone(timezoneOffset, ':');\n    }\n  },\n  // Timezone (specific non-location)\n  z: function (date, token, _localize, options) {\n    var originalDate = options._originalDate || date;\n    var timezoneOffset = originalDate.getTimezoneOffset();\n\n    switch (token) {\n      // Short\n      case 'z':\n      case 'zz':\n      case 'zzz':\n        return 'GMT' + formatTimezoneShort(timezoneOffset, ':');\n      // Long\n\n      case 'zzzz':\n      default:\n        return 'GMT' + formatTimezone(timezoneOffset, ':');\n    }\n  },\n  // Seconds timestamp\n  t: function (date, token, _localize, options) {\n    var originalDate = options._originalDate || date;\n    var timestamp = Math.floor(originalDate.getTime() / 1000);\n    return addLeadingZeros(timestamp, token.length);\n  },\n  // Milliseconds timestamp\n  T: function (date, token, _localize, options) {\n    var originalDate = options._originalDate || date;\n    var timestamp = originalDate.getTime();\n    return addLeadingZeros(timestamp, token.length);\n  }\n};\n\nfunction formatTimezoneShort(offset, dirtyDelimiter) {\n  var sign = offset > 0 ? '-' : '+';\n  var absOffset = Math.abs(offset);\n  var hours = Math.floor(absOffset / 60);\n  var minutes = absOffset % 60;\n\n  if (minutes === 0) {\n    return sign + String(hours);\n  }\n\n  var delimiter = dirtyDelimiter || '';\n  return sign + String(hours) + delimiter + addLeadingZeros(minutes, 2);\n}\n\nfunction formatTimezoneWithOptionalMinutes(offset, dirtyDelimiter) {\n  if (offset % 60 === 0) {\n    var sign = offset > 0 ? '-' : '+';\n    return sign + addLeadingZeros(Math.abs(offset) / 60, 2);\n  }\n\n  return formatTimezone(offset, dirtyDelimiter);\n}\n\nfunction formatTimezone(offset, dirtyDelimiter) {\n  var delimiter = dirtyDelimiter || '';\n  var sign = offset > 0 ? '-' : '+';\n  var absOffset = Math.abs(offset);\n  var hours = addLeadingZeros(Math.floor(absOffset / 60), 2);\n  var minutes = addLeadingZeros(absOffset % 60, 2);\n  return sign + hours + delimiter + minutes;\n}\n\nexport default formatters;","import toDate from \"../../toDate/index.js\";\nimport startOfUTCWeek from \"../startOfUTCWeek/index.js\";\nimport startOfUTCWeekYear from \"../startOfUTCWeekYear/index.js\";\nimport requiredArgs from \"../requiredArgs/index.js\";\nvar MILLISECONDS_IN_WEEK = 604800000; // This function will be a part of public API when UTC function will be implemented.\n// See issue: https://github.com/date-fns/date-fns/issues/376\n\nexport default function getUTCWeek(dirtyDate, options) {\n  requiredArgs(1, arguments);\n  var date = toDate(dirtyDate);\n  var diff = startOfUTCWeek(date, options).getTime() - startOfUTCWeekYear(date, options).getTime(); // Round the number of days to the nearest integer\n  // because the number of milliseconds in a week is not constant\n  // (e.g. it's different in the week of the daylight saving time clock shift)\n\n  return Math.round(diff / MILLISECONDS_IN_WEEK) + 1;\n}","import getUTCWeekYear from \"../getUTCWeekYear/index.js\";\nimport requiredArgs from \"../requiredArgs/index.js\";\nimport startOfUTCWeek from \"../startOfUTCWeek/index.js\";\nimport toInteger from \"../toInteger/index.js\"; // This function will be a part of public API when UTC function will be implemented.\n// See issue: https://github.com/date-fns/date-fns/issues/376\n\nexport default function startOfUTCWeekYear(dirtyDate, dirtyOptions) {\n  requiredArgs(1, arguments);\n  var options = dirtyOptions || {};\n  var locale = options.locale;\n  var localeFirstWeekContainsDate = locale && locale.options && locale.options.firstWeekContainsDate;\n  var defaultFirstWeekContainsDate = localeFirstWeekContainsDate == null ? 1 : toInteger(localeFirstWeekContainsDate);\n  var firstWeekContainsDate = options.firstWeekContainsDate == null ? defaultFirstWeekContainsDate : toInteger(options.firstWeekContainsDate);\n  var year = getUTCWeekYear(dirtyDate, dirtyOptions);\n  var firstWeek = new Date(0);\n  firstWeek.setUTCFullYear(year, 0, firstWeekContainsDate);\n  firstWeek.setUTCHours(0, 0, 0, 0);\n  var date = startOfUTCWeek(firstWeek, dirtyOptions);\n  return date;\n}","import toDate from \"../../toDate/index.js\";\nimport startOfUTCISOWeek from \"../startOfUTCISOWeek/index.js\";\nimport startOfUTCISOWeekYear from \"../startOfUTCISOWeekYear/index.js\";\nimport requiredArgs from \"../requiredArgs/index.js\";\nvar MILLISECONDS_IN_WEEK = 604800000; // This function will be a part of public API when UTC function will be implemented.\n// See issue: https://github.com/date-fns/date-fns/issues/376\n\nexport default function getUTCISOWeek(dirtyDate) {\n  requiredArgs(1, arguments);\n  var date = toDate(dirtyDate);\n  var diff = startOfUTCISOWeek(date).getTime() - startOfUTCISOWeekYear(date).getTime(); // Round the number of days to the nearest integer\n  // because the number of milliseconds in a week is not constant\n  // (e.g. it's different in the week of the daylight saving time clock shift)\n\n  return Math.round(diff / MILLISECONDS_IN_WEEK) + 1;\n}","import getUTCISOWeekYear from \"../getUTCISOWeekYear/index.js\";\nimport startOfUTCISOWeek from \"../startOfUTCISOWeek/index.js\";\nimport requiredArgs from \"../requiredArgs/index.js\"; // This function will be a part of public API when UTC function will be implemented.\n// See issue: https://github.com/date-fns/date-fns/issues/376\n\nexport default function startOfUTCISOWeekYear(dirtyDate) {\n  requiredArgs(1, arguments);\n  var year = getUTCISOWeekYear(dirtyDate);\n  var fourthOfJanuary = new Date(0);\n  fourthOfJanuary.setUTCFullYear(year, 0, 4);\n  fourthOfJanuary.setUTCHours(0, 0, 0, 0);\n  var date = startOfUTCISOWeek(fourthOfJanuary);\n  return date;\n}","import toDate from \"../../toDate/index.js\";\nimport requiredArgs from \"../requiredArgs/index.js\";\nvar MILLISECONDS_IN_DAY = 86400000; // This function will be a part of public API when UTC function will be implemented.\n// See issue: https://github.com/date-fns/date-fns/issues/376\n\nexport default function getUTCDayOfYear(dirtyDate) {\n  requiredArgs(1, arguments);\n  var date = toDate(dirtyDate);\n  var timestamp = date.getTime();\n  date.setUTCMonth(0, 1);\n  date.setUTCHours(0, 0, 0, 0);\n  var startOfYearTimestamp = date.getTime();\n  var difference = timestamp - startOfYearTimestamp;\n  return Math.floor(difference / MILLISECONDS_IN_DAY) + 1;\n}","import toInteger from \"../_lib/toInteger/index.js\";\nimport toDate from \"../toDate/index.js\";\nimport requiredArgs from \"../_lib/requiredArgs/index.js\";\n/**\n * @name addDays\n * @category Day Helpers\n * @summary Add the specified number of days to the given date.\n *\n * @description\n * Add the specified number of days to the given date.\n *\n * ### v2.0.0 breaking changes:\n *\n * - [Changes that are common for the whole library](https://github.com/date-fns/date-fns/blob/master/docs/upgradeGuide.md#Common-Changes).\n *\n * @param {Date|Number} date - the date to be changed\n * @param {Number} amount - the amount of days to be added. Positive decimals will be rounded using `Math.floor`, decimals less than zero will be rounded using `Math.ceil`.\n * @returns {Date} - the new date with the days added\n * @throws {TypeError} - 2 arguments required\n *\n * @example\n * // Add 10 days to 1 September 2014:\n * const result = addDays(new Date(2014, 8, 1), 10)\n * //=> Thu Sep 11 2014 00:00:00\n */\n\nexport default function addDays(dirtyDate, dirtyAmount) {\n  requiredArgs(2, arguments);\n  var date = toDate(dirtyDate);\n  var amount = toInteger(dirtyAmount);\n\n  if (isNaN(amount)) {\n    return new Date(NaN);\n  }\n\n  if (!amount) {\n    // If 0 days, no-op to avoid changing times in the hour before end of DST\n    return date;\n  }\n\n  date.setDate(date.getDate() + amount);\n  return date;\n}","import dsv from \"./dsv.js\";\n\nvar csv = dsv(\",\");\n\nexport var csvParse = csv.parse;\nexport var csvParseRows = csv.parseRows;\nexport var csvFormat = csv.format;\nexport var csvFormatBody = csv.formatBody;\nexport var csvFormatRows = csv.formatRows;\nexport var csvFormatRow = csv.formatRow;\nexport var csvFormatValue = csv.formatValue;\n","export default function autoType(object) {\n  for (var key in object) {\n    var value = object[key].trim(), number, m;\n    if (!value) value = null;\n    else if (value === \"true\") value = true;\n    else if (value === \"false\") value = false;\n    else if (value === \"NaN\") value = NaN;\n    else if (!isNaN(number = +value)) value = number;\n    else if (m = value.match(/^([-+]\\d{2})?\\d{4}(-\\d{2}(-\\d{2})?)?(T\\d{2}:\\d{2}(:\\d{2}(\\.\\d{3})?)?(Z|[-+]\\d{2}:\\d{2})?)?$/)) {\n      if (fixtz && !!m[4] && !m[7]) value = value.replace(/-/g, \"/\").replace(/T/, \" \");\n      value = new Date(value);\n    }\n    else continue;\n    object[key] = value;\n  }\n  return object;\n}\n\n// https://github.com/d3/d3-dsv/issues/45\nconst fixtz = new Date(\"2019-01-01T00:00\").getHours() || new Date(\"2019-07-01T00:00\").getHours();","import isValid from \"../isValid/index.js\";\nimport defaultLocale from \"../locale/en-US/index.js\";\nimport subMilliseconds from \"../subMilliseconds/index.js\";\nimport toDate from \"../toDate/index.js\";\nimport formatters from \"../_lib/format/formatters/index.js\";\nimport longFormatters from \"../_lib/format/longFormatters/index.js\";\nimport getTimezoneOffsetInMilliseconds from \"../_lib/getTimezoneOffsetInMilliseconds/index.js\";\nimport { isProtectedDayOfYearToken, isProtectedWeekYearToken, throwProtectedError } from \"../_lib/protectedTokens/index.js\";\nimport toInteger from \"../_lib/toInteger/index.js\";\nimport requiredArgs from \"../_lib/requiredArgs/index.js\"; // This RegExp consists of three parts separated by `|`:\n// - [yYQqMLwIdDecihHKkms]o matches any available ordinal number token\n//   (one of the certain letters followed by `o`)\n// - (\\w)\\1* matches any sequences of the same letter\n// - '' matches two quote characters in a row\n// - '(''|[^'])+('|$) matches anything surrounded by two quote characters ('),\n//   except a single quote symbol, which ends the sequence.\n//   Two quote characters do not end the sequence.\n//   If there is no matching single quote\n//   then the sequence will continue until the end of the string.\n// - . matches any single character unmatched by previous parts of the RegExps\n\nvar formattingTokensRegExp = /[yYQqMLwIdDecihHKkms]o|(\\w)\\1*|''|'(''|[^'])+('|$)|./g; // This RegExp catches symbols escaped by quotes, and also\n// sequences of symbols P, p, and the combinations like `PPPPPPPppppp`\n\nvar longFormattingTokensRegExp = /P+p+|P+|p+|''|'(''|[^'])+('|$)|./g;\nvar escapedStringRegExp = /^'([^]*?)'?$/;\nvar doubleQuoteRegExp = /''/g;\nvar unescapedLatinCharacterRegExp = /[a-zA-Z]/;\n/**\n * @name format\n * @category Common Helpers\n * @summary Format the date.\n *\n * @description\n * Return the formatted date string in the given format. The result may vary by locale.\n *\n * > ⚠️ Please note that the `format` tokens differ from Moment.js and other libraries.\n * > See: https://git.io/fxCyr\n *\n * The characters wrapped between two single quotes characters (') are escaped.\n * Two single quotes in a row, whether inside or outside a quoted sequence, represent a 'real' single quote.\n * (see the last example)\n *\n * Format of the string is based on Unicode Technical Standard #35:\n * https://www.unicode.org/reports/tr35/tr35-dates.html#Date_Field_Symbol_Table\n * with a few additions (see note 7 below the table).\n *\n * Accepted patterns:\n * | Unit                            | Pattern | Result examples                   | Notes |\n * |---------------------------------|---------|-----------------------------------|-------|\n * | Era                             | G..GGG  | AD, BC                            |       |\n * |                                 | GGGG    | Anno Domini, Before Christ        | 2     |\n * |                                 | GGGGG   | A, B                              |       |\n * | Calendar year                   | y       | 44, 1, 1900, 2017                 | 5     |\n * |                                 | yo      | 44th, 1st, 0th, 17th              | 5,7   |\n * |                                 | yy      | 44, 01, 00, 17                    | 5     |\n * |                                 | yyy     | 044, 001, 1900, 2017              | 5     |\n * |                                 | yyyy    | 0044, 0001, 1900, 2017            | 5     |\n * |                                 | yyyyy   | ...                               | 3,5   |\n * | Local week-numbering year       | Y       | 44, 1, 1900, 2017                 | 5     |\n * |                                 | Yo      | 44th, 1st, 1900th, 2017th         | 5,7   |\n * |                                 | YY      | 44, 01, 00, 17                    | 5,8   |\n * |                                 | YYY     | 044, 001, 1900, 2017              | 5     |\n * |                                 | YYYY    | 0044, 0001, 1900, 2017            | 5,8   |\n * |                                 | YYYYY   | ...                               | 3,5   |\n * | ISO week-numbering year         | R       | -43, 0, 1, 1900, 2017             | 5,7   |\n * |                                 | RR      | -43, 00, 01, 1900, 2017           | 5,7   |\n * |                                 | RRR     | -043, 000, 001, 1900, 2017        | 5,7   |\n * |                                 | RRRR    | -0043, 0000, 0001, 1900, 2017     | 5,7   |\n * |                                 | RRRRR   | ...                               | 3,5,7 |\n * | Extended year                   | u       | -43, 0, 1, 1900, 2017             | 5     |\n * |                                 | uu      | -43, 01, 1900, 2017               | 5     |\n * |                                 | uuu     | -043, 001, 1900, 2017             | 5     |\n * |                                 | uuuu    | -0043, 0001, 1900, 2017           | 5     |\n * |                                 | uuuuu   | ...                               | 3,5   |\n * | Quarter (formatting)            | Q       | 1, 2, 3, 4                        |       |\n * |                                 | Qo      | 1st, 2nd, 3rd, 4th                | 7     |\n * |                                 | QQ      | 01, 02, 03, 04                    |       |\n * |                                 | QQQ     | Q1, Q2, Q3, Q4                    |       |\n * |                                 | QQQQ    | 1st quarter, 2nd quarter, ...     | 2     |\n * |                                 | QQQQQ   | 1, 2, 3, 4                        | 4     |\n * | Quarter (stand-alone)           | q       | 1, 2, 3, 4                        |       |\n * |                                 | qo      | 1st, 2nd, 3rd, 4th                | 7     |\n * |                                 | qq      | 01, 02, 03, 04                    |       |\n * |                                 | qqq     | Q1, Q2, Q3, Q4                    |       |\n * |                                 | qqqq    | 1st quarter, 2nd quarter, ...     | 2     |\n * |                                 | qqqqq   | 1, 2, 3, 4                        | 4     |\n * | Month (formatting)              | M       | 1, 2, ..., 12                     |       |\n * |                                 | Mo      | 1st, 2nd, ..., 12th               | 7     |\n * |                                 | MM      | 01, 02, ..., 12                   |       |\n * |                                 | MMM     | Jan, Feb, ..., Dec                |       |\n * |                                 | MMMM    | January, February, ..., December  | 2     |\n * |                                 | MMMMM   | J, F, ..., D                      |       |\n * | Month (stand-alone)             | L       | 1, 2, ..., 12                     |       |\n * |                                 | Lo      | 1st, 2nd, ..., 12th               | 7     |\n * |                                 | LL      | 01, 02, ..., 12                   |       |\n * |                                 | LLL     | Jan, Feb, ..., Dec                |       |\n * |                                 | LLLL    | January, February, ..., December  | 2     |\n * |                                 | LLLLL   | J, F, ..., D                      |       |\n * | Local week of year              | w       | 1, 2, ..., 53                     |       |\n * |                                 | wo      | 1st, 2nd, ..., 53th               | 7     |\n * |                                 | ww      | 01, 02, ..., 53                   |       |\n * | ISO week of year                | I       | 1, 2, ..., 53                     | 7     |\n * |                                 | Io      | 1st, 2nd, ..., 53th               | 7     |\n * |                                 | II      | 01, 02, ..., 53                   | 7     |\n * | Day of month                    | d       | 1, 2, ..., 31                     |       |\n * |                                 | do      | 1st, 2nd, ..., 31st               | 7     |\n * |                                 | dd      | 01, 02, ..., 31                   |       |\n * | Day of year                     | D       | 1, 2, ..., 365, 366               | 9     |\n * |                                 | Do      | 1st, 2nd, ..., 365th, 366th       | 7     |\n * |                                 | DD      | 01, 02, ..., 365, 366             | 9     |\n * |                                 | DDD     | 001, 002, ..., 365, 366           |       |\n * |                                 | DDDD    | ...                               | 3     |\n * | Day of week (formatting)        | E..EEE  | Mon, Tue, Wed, ..., Sun           |       |\n * |                                 | EEEE    | Monday, Tuesday, ..., Sunday      | 2     |\n * |                                 | EEEEE   | M, T, W, T, F, S, S               |       |\n * |                                 | EEEEEE  | Mo, Tu, We, Th, Fr, Sa, Su        |       |\n * | ISO day of week (formatting)    | i       | 1, 2, 3, ..., 7                   | 7     |\n * |                                 | io      | 1st, 2nd, ..., 7th                | 7     |\n * |                                 | ii      | 01, 02, ..., 07                   | 7     |\n * |                                 | iii     | Mon, Tue, Wed, ..., Sun           | 7     |\n * |                                 | iiii    | Monday, Tuesday, ..., Sunday      | 2,7   |\n * |                                 | iiiii   | M, T, W, T, F, S, S               | 7     |\n * |                                 | iiiiii  | Mo, Tu, We, Th, Fr, Sa, Su        | 7     |\n * | Local day of week (formatting)  | e       | 2, 3, 4, ..., 1                   |       |\n * |                                 | eo      | 2nd, 3rd, ..., 1st                | 7     |\n * |                                 | ee      | 02, 03, ..., 01                   |       |\n * |                                 | eee     | Mon, Tue, Wed, ..., Sun           |       |\n * |                                 | eeee    | Monday, Tuesday, ..., Sunday      | 2     |\n * |                                 | eeeee   | M, T, W, T, F, S, S               |       |\n * |                                 | eeeeee  | Mo, Tu, We, Th, Fr, Sa, Su        |       |\n * | Local day of week (stand-alone) | c       | 2, 3, 4, ..., 1                   |       |\n * |                                 | co      | 2nd, 3rd, ..., 1st                | 7     |\n * |                                 | cc      | 02, 03, ..., 01                   |       |\n * |                                 | ccc     | Mon, Tue, Wed, ..., Sun           |       |\n * |                                 | cccc    | Monday, Tuesday, ..., Sunday      | 2     |\n * |                                 | ccccc   | M, T, W, T, F, S, S               |       |\n * |                                 | cccccc  | Mo, Tu, We, Th, Fr, Sa, Su        |       |\n * | AM, PM                          | a..aa   | AM, PM                            |       |\n * |                                 | aaa     | am, pm                            |       |\n * |                                 | aaaa    | a.m., p.m.                        | 2     |\n * |                                 | aaaaa   | a, p                              |       |\n * | AM, PM, noon, midnight          | b..bb   | AM, PM, noon, midnight            |       |\n * |                                 | bbb     | am, pm, noon, midnight            |       |\n * |                                 | bbbb    | a.m., p.m., noon, midnight        | 2     |\n * |                                 | bbbbb   | a, p, n, mi                       |       |\n * | Flexible day period             | B..BBB  | at night, in the morning, ...     |       |\n * |                                 | BBBB    | at night, in the morning, ...     | 2     |\n * |                                 | BBBBB   | at night, in the morning, ...     |       |\n * | Hour [1-12]                     | h       | 1, 2, ..., 11, 12                 |       |\n * |                                 | ho      | 1st, 2nd, ..., 11th, 12th         | 7     |\n * |                                 | hh      | 01, 02, ..., 11, 12               |       |\n * | Hour [0-23]                     | H       | 0, 1, 2, ..., 23                  |       |\n * |                                 | Ho      | 0th, 1st, 2nd, ..., 23rd          | 7     |\n * |                                 | HH      | 00, 01, 02, ..., 23               |       |\n * | Hour [0-11]                     | K       | 1, 2, ..., 11, 0                  |       |\n * |                                 | Ko      | 1st, 2nd, ..., 11th, 0th          | 7     |\n * |                                 | KK      | 01, 02, ..., 11, 00               |       |\n * | Hour [1-24]                     | k       | 24, 1, 2, ..., 23                 |       |\n * |                                 | ko      | 24th, 1st, 2nd, ..., 23rd         | 7     |\n * |                                 | kk      | 24, 01, 02, ..., 23               |       |\n * | Minute                          | m       | 0, 1, ..., 59                     |       |\n * |                                 | mo      | 0th, 1st, ..., 59th               | 7     |\n * |                                 | mm      | 00, 01, ..., 59                   |       |\n * | Second                          | s       | 0, 1, ..., 59                     |       |\n * |                                 | so      | 0th, 1st, ..., 59th               | 7     |\n * |                                 | ss      | 00, 01, ..., 59                   |       |\n * | Fraction of second              | S       | 0, 1, ..., 9                      |       |\n * |                                 | SS      | 00, 01, ..., 99                   |       |\n * |                                 | SSS     | 000, 001, ..., 999                |       |\n * |                                 | SSSS    | ...                               | 3     |\n * | Timezone (ISO-8601 w/ Z)        | X       | -08, +0530, Z                     |       |\n * |                                 | XX      | -0800, +0530, Z                   |       |\n * |                                 | XXX     | -08:00, +05:30, Z                 |       |\n * |                                 | XXXX    | -0800, +0530, Z, +123456          | 2     |\n * |                                 | XXXXX   | -08:00, +05:30, Z, +12:34:56      |       |\n * | Timezone (ISO-8601 w/o Z)       | x       | -08, +0530, +00                   |       |\n * |                                 | xx      | -0800, +0530, +0000               |       |\n * |                                 | xxx     | -08:00, +05:30, +00:00            | 2     |\n * |                                 | xxxx    | -0800, +0530, +0000, +123456      |       |\n * |                                 | xxxxx   | -08:00, +05:30, +00:00, +12:34:56 |       |\n * | Timezone (GMT)                  | O...OOO | GMT-8, GMT+5:30, GMT+0            |       |\n * |                                 | OOOO    | GMT-08:00, GMT+05:30, GMT+00:00   | 2     |\n * | Timezone (specific non-locat.)  | z...zzz | GMT-8, GMT+5:30, GMT+0            | 6     |\n * |                                 | zzzz    | GMT-08:00, GMT+05:30, GMT+00:00   | 2,6   |\n * | Seconds timestamp               | t       | 512969520                         | 7     |\n * |                                 | tt      | ...                               | 3,7   |\n * | Milliseconds timestamp          | T       | 512969520900                      | 7     |\n * |                                 | TT      | ...                               | 3,7   |\n * | Long localized date             | P       | 04/29/1453                        | 7     |\n * |                                 | PP      | Apr 29, 1453                      | 7     |\n * |                                 | PPP     | April 29th, 1453                  | 7     |\n * |                                 | PPPP    | Friday, April 29th, 1453          | 2,7   |\n * | Long localized time             | p       | 12:00 AM                          | 7     |\n * |                                 | pp      | 12:00:00 AM                       | 7     |\n * |                                 | ppp     | 12:00:00 AM GMT+2                 | 7     |\n * |                                 | pppp    | 12:00:00 AM GMT+02:00             | 2,7   |\n * | Combination of date and time    | Pp      | 04/29/1453, 12:00 AM              | 7     |\n * |                                 | PPpp    | Apr 29, 1453, 12:00:00 AM         | 7     |\n * |                                 | PPPppp  | April 29th, 1453 at ...           | 7     |\n * |                                 | PPPPpppp| Friday, April 29th, 1453 at ...   | 2,7   |\n * Notes:\n * 1. \"Formatting\" units (e.g. formatting quarter) in the default en-US locale\n *    are the same as \"stand-alone\" units, but are different in some languages.\n *    \"Formatting\" units are declined according to the rules of the language\n *    in the context of a date. \"Stand-alone\" units are always nominative singular:\n *\n *    `format(new Date(2017, 10, 6), 'do LLLL', {locale: cs}) //=> '6. listopad'`\n *\n *    `format(new Date(2017, 10, 6), 'do MMMM', {locale: cs}) //=> '6. listopadu'`\n *\n * 2. Any sequence of the identical letters is a pattern, unless it is escaped by\n *    the single quote characters (see below).\n *    If the sequence is longer than listed in table (e.g. `EEEEEEEEEEE`)\n *    the output will be the same as default pattern for this unit, usually\n *    the longest one (in case of ISO weekdays, `EEEE`). Default patterns for units\n *    are marked with \"2\" in the last column of the table.\n *\n *    `format(new Date(2017, 10, 6), 'MMM') //=> 'Nov'`\n *\n *    `format(new Date(2017, 10, 6), 'MMMM') //=> 'November'`\n *\n *    `format(new Date(2017, 10, 6), 'MMMMM') //=> 'N'`\n *\n *    `format(new Date(2017, 10, 6), 'MMMMMM') //=> 'November'`\n *\n *    `format(new Date(2017, 10, 6), 'MMMMMMM') //=> 'November'`\n *\n * 3. Some patterns could be unlimited length (such as `yyyyyyyy`).\n *    The output will be padded with zeros to match the length of the pattern.\n *\n *    `format(new Date(2017, 10, 6), 'yyyyyyyy') //=> '00002017'`\n *\n * 4. `QQQQQ` and `qqqqq` could be not strictly numerical in some locales.\n *    These tokens represent the shortest form of the quarter.\n *\n * 5. The main difference between `y` and `u` patterns are B.C. years:\n *\n *    | Year | `y` | `u` |\n *    |------|-----|-----|\n *    | AC 1 |   1 |   1 |\n *    | BC 1 |   1 |   0 |\n *    | BC 2 |   2 |  -1 |\n *\n *    Also `yy` always returns the last two digits of a year,\n *    while `uu` pads single digit years to 2 characters and returns other years unchanged:\n *\n *    | Year | `yy` | `uu` |\n *    |------|------|------|\n *    | 1    |   01 |   01 |\n *    | 14   |   14 |   14 |\n *    | 376  |   76 |  376 |\n *    | 1453 |   53 | 1453 |\n *\n *    The same difference is true for local and ISO week-numbering years (`Y` and `R`),\n *    except local week-numbering years are dependent on `options.weekStartsOn`\n *    and `options.firstWeekContainsDate` (compare [getISOWeekYear]{@link https://date-fns.org/docs/getISOWeekYear}\n *    and [getWeekYear]{@link https://date-fns.org/docs/getWeekYear}).\n *\n * 6. Specific non-location timezones are currently unavailable in `date-fns`,\n *    so right now these tokens fall back to GMT timezones.\n *\n * 7. These patterns are not in the Unicode Technical Standard #35:\n *    - `i`: ISO day of week\n *    - `I`: ISO week of year\n *    - `R`: ISO week-numbering year\n *    - `t`: seconds timestamp\n *    - `T`: milliseconds timestamp\n *    - `o`: ordinal number modifier\n *    - `P`: long localized date\n *    - `p`: long localized time\n *\n * 8. `YY` and `YYYY` tokens represent week-numbering years but they are often confused with years.\n *    You should enable `options.useAdditionalWeekYearTokens` to use them. See: https://git.io/fxCyr\n *\n * 9. `D` and `DD` tokens represent days of the year but they are often confused with days of the month.\n *    You should enable `options.useAdditionalDayOfYearTokens` to use them. See: https://git.io/fxCyr\n *\n * ### v2.0.0 breaking changes:\n *\n * - [Changes that are common for the whole library](https://github.com/date-fns/date-fns/blob/master/docs/upgradeGuide.md#Common-Changes).\n *\n * - The second argument is now required for the sake of explicitness.\n *\n *   ```javascript\n *   // Before v2.0.0\n *   format(new Date(2016, 0, 1))\n *\n *   // v2.0.0 onward\n *   format(new Date(2016, 0, 1), \"yyyy-MM-dd'T'HH:mm:ss.SSSxxx\")\n *   ```\n *\n * - New format string API for `format` function\n *   which is based on [Unicode Technical Standard #35](https://www.unicode.org/reports/tr35/tr35-dates.html#Date_Field_Symbol_Table).\n *   See [this post](https://blog.date-fns.org/post/unicode-tokens-in-date-fns-v2-sreatyki91jg) for more details.\n *\n * - Characters are now escaped using single quote symbols (`'`) instead of square brackets.\n *\n * @param {Date|Number} date - the original date\n * @param {String} format - the string of tokens\n * @param {Object} [options] - an object with options.\n * @param {Locale} [options.locale=defaultLocale] - the locale object. See [Locale]{@link https://date-fns.org/docs/Locale}\n * @param {0|1|2|3|4|5|6} [options.weekStartsOn=0] - the index of the first day of the week (0 - Sunday)\n * @param {Number} [options.firstWeekContainsDate=1] - the day of January, which is\n * @param {Boolean} [options.useAdditionalWeekYearTokens=false] - if true, allows usage of the week-numbering year tokens `YY` and `YYYY`;\n *   see: https://git.io/fxCyr\n * @param {Boolean} [options.useAdditionalDayOfYearTokens=false] - if true, allows usage of the day of year tokens `D` and `DD`;\n *   see: https://git.io/fxCyr\n * @returns {String} the formatted date string\n * @throws {TypeError} 2 arguments required\n * @throws {RangeError} `date` must not be Invalid Date\n * @throws {RangeError} `options.locale` must contain `localize` property\n * @throws {RangeError} `options.locale` must contain `formatLong` property\n * @throws {RangeError} `options.weekStartsOn` must be between 0 and 6\n * @throws {RangeError} `options.firstWeekContainsDate` must be between 1 and 7\n * @throws {RangeError} use `yyyy` instead of `YYYY` for formatting years using [format provided] to the input [input provided]; see: https://git.io/fxCyr\n * @throws {RangeError} use `yy` instead of `YY` for formatting years using [format provided] to the input [input provided]; see: https://git.io/fxCyr\n * @throws {RangeError} use `d` instead of `D` for formatting days of the month using [format provided] to the input [input provided]; see: https://git.io/fxCyr\n * @throws {RangeError} use `dd` instead of `DD` for formatting days of the month using [format provided] to the input [input provided]; see: https://git.io/fxCyr\n * @throws {RangeError} format string contains an unescaped latin alphabet character\n *\n * @example\n * // Represent 11 February 2014 in middle-endian format:\n * var result = format(new Date(2014, 1, 11), 'MM/dd/yyyy')\n * //=> '02/11/2014'\n *\n * @example\n * // Represent 2 July 2014 in Esperanto:\n * import { eoLocale } from 'date-fns/locale/eo'\n * var result = format(new Date(2014, 6, 2), \"do 'de' MMMM yyyy\", {\n *   locale: eoLocale\n * })\n * //=> '2-a de julio 2014'\n *\n * @example\n * // Escape string by single quote characters:\n * var result = format(new Date(2014, 6, 2, 15), \"h 'o''clock'\")\n * //=> \"3 o'clock\"\n */\n\nexport default function format(dirtyDate, dirtyFormatStr, dirtyOptions) {\n  requiredArgs(2, arguments);\n  var formatStr = String(dirtyFormatStr);\n  var options = dirtyOptions || {};\n  var locale = options.locale || defaultLocale;\n  var localeFirstWeekContainsDate = locale.options && locale.options.firstWeekContainsDate;\n  var defaultFirstWeekContainsDate = localeFirstWeekContainsDate == null ? 1 : toInteger(localeFirstWeekContainsDate);\n  var firstWeekContainsDate = options.firstWeekContainsDate == null ? defaultFirstWeekContainsDate : toInteger(options.firstWeekContainsDate); // Test if weekStartsOn is between 1 and 7 _and_ is not NaN\n\n  if (!(firstWeekContainsDate >= 1 && firstWeekContainsDate <= 7)) {\n    throw new RangeError('firstWeekContainsDate must be between 1 and 7 inclusively');\n  }\n\n  var localeWeekStartsOn = locale.options && locale.options.weekStartsOn;\n  var defaultWeekStartsOn = localeWeekStartsOn == null ? 0 : toInteger(localeWeekStartsOn);\n  var weekStartsOn = options.weekStartsOn == null ? defaultWeekStartsOn : toInteger(options.weekStartsOn); // Test if weekStartsOn is between 0 and 6 _and_ is not NaN\n\n  if (!(weekStartsOn >= 0 && weekStartsOn <= 6)) {\n    throw new RangeError('weekStartsOn must be between 0 and 6 inclusively');\n  }\n\n  if (!locale.localize) {\n    throw new RangeError('locale must contain localize property');\n  }\n\n  if (!locale.formatLong) {\n    throw new RangeError('locale must contain formatLong property');\n  }\n\n  var originalDate = toDate(dirtyDate);\n\n  if (!isValid(originalDate)) {\n    throw new RangeError('Invalid time value');\n  } // Convert the date in system timezone to the same date in UTC+00:00 timezone.\n  // This ensures that when UTC functions will be implemented, locales will be compatible with them.\n  // See an issue about UTC functions: https://github.com/date-fns/date-fns/issues/376\n\n\n  var timezoneOffset = getTimezoneOffsetInMilliseconds(originalDate);\n  var utcDate = subMilliseconds(originalDate, timezoneOffset);\n  var formatterOptions = {\n    firstWeekContainsDate: firstWeekContainsDate,\n    weekStartsOn: weekStartsOn,\n    locale: locale,\n    _originalDate: originalDate\n  };\n  var result = formatStr.match(longFormattingTokensRegExp).map(function (substring) {\n    var firstCharacter = substring[0];\n\n    if (firstCharacter === 'p' || firstCharacter === 'P') {\n      var longFormatter = longFormatters[firstCharacter];\n      return longFormatter(substring, locale.formatLong, formatterOptions);\n    }\n\n    return substring;\n  }).join('').match(formattingTokensRegExp).map(function (substring) {\n    // Replace two single quote characters with one single quote character\n    if (substring === \"''\") {\n      return \"'\";\n    }\n\n    var firstCharacter = substring[0];\n\n    if (firstCharacter === \"'\") {\n      return cleanEscapedString(substring);\n    }\n\n    var formatter = formatters[firstCharacter];\n\n    if (formatter) {\n      if (!options.useAdditionalWeekYearTokens && isProtectedWeekYearToken(substring)) {\n        throwProtectedError(substring, dirtyFormatStr, dirtyDate);\n      }\n\n      if (!options.useAdditionalDayOfYearTokens && isProtectedDayOfYearToken(substring)) {\n        throwProtectedError(substring, dirtyFormatStr, dirtyDate);\n      }\n\n      return formatter(utcDate, substring, locale.localize, formatterOptions);\n    }\n\n    if (firstCharacter.match(unescapedLatinCharacterRegExp)) {\n      throw new RangeError('Format string contains an unescaped latin alphabet character `' + firstCharacter + '`');\n    }\n\n    return substring;\n  }).join('');\n  return result;\n}\n\nfunction cleanEscapedString(input) {\n  return input.match(escapedStringRegExp)[1].replace(doubleQuoteRegExp, \"'\");\n}"],"sourceRoot":""}